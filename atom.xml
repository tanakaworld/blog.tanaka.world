<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>For X Developers</title>
  
  <subtitle>memo for me and &quot;X&quot; developers in the world.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.tanaka.world/"/>
  <updated>2020-12-31T06:47:31.913Z</updated>
  <id>https://blog.tanaka.world/</id>
  
  <author>
    <name>tanakaworld</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020年の振り返り</title>
    <link href="https://blog.tanaka.world/2020/"/>
    <id>https://blog.tanaka.world/2020/</id>
    <published>2020-12-31T04:00:00.000Z</published>
    <updated>2020-12-31T06:47:31.913Z</updated>
    
    <content type="html"><![CDATA[<p>WFH になり、仕事や生活様式が劇的に変化した 1 年だった。<strong>変化に強いものが生き残る</strong>ということを体感した。</p><h2 id="メルペイ"><a href="#メルペイ" class="headerlink" title="メルペイ"></a>メルペイ</h2><p>入社してから約 2 年半経った。過去に正社員で働いた会社の中では最長となっている。振り返ると入社してから 2020 年に入るまではメルペイリリース前後のバタバタであまり余裕がなかった。今年はメンバーが増えたおかげでこれまでやりたかったけどできなかったことができるようになった。</p><ul><li>1 月<ul><li>英語ネイティブと一緒に仕事するようになった (<a href="/english-2020/">業務で英語を使うときの準備と実践ログ</a>)</li></ul></li><li>2 月 〜 3 月<ul><li>2 末からフルリモートワークが続いている。結局 2 回だけしかオフィスに出社していない。</li><li>2 月にも 1 人外国籍メンバーが増え、さらに Origami のメンバーもジョインしチームメンバーが一気に増えた</li><li>オンボーディングやコンポーネントリニューアルを担当した</li></ul></li><li>4 月 〜 7 月<ul><li><a href="https://jp-news.mercari.com/2020/07/03/mynumber/" target="_blank" rel="noopener">マイナンバーポイントキャンペーン</a>の開発に関わった</li></ul></li><li>8 月 〜 現在<ul><li>Engineering Division でリグレッションテストの自動化をしていくことになった</li><li>自分は Frontend 領域のオーナーとして取り組んだ (<a href="https://engineering.mercari.com/blog/entry/20201207-cypress-testrail-frontend-e2e-automation/" target="_blank" rel="noopener">Cypress + TestRail による Frontend E2E テストの効率化について</a>)</li><li>10 月からは Engineering Manager をやっている。完全にコードを書かなくなったわけではなく、50% マネジメント・50% プロダクト開発という割合でやっている</li></ul></li></ul><h2 id="Proff"><a href="#Proff" class="headerlink" title="Proff"></a>Proff</h2><ul><li><a href="/revamp-proff-io-infra-ecs-fargate/">ECS/Fargate</a> に移行した</li><li>E2E テストを整備し、Renovate の更新を半自動でできるようにした</li><li>その他、細かい改修をいくつかやった</li></ul><h2 id="衣食住"><a href="#衣食住" class="headerlink" title="衣食住"></a>衣食住</h2><ul><li>WFH が主となり家にいる時間が圧倒的に増えた</li><li>前半は <a href="/life-from-home-covid-19/">Life From Home</a> で書いた</li><li>散歩は継続している</li><li>9 月に引っ越しをして環境を整えた (<a href="/the-best-things-2020/">2020 年買ってよかったもの</a>)</li></ul><h2 id="禁酒と健康"><a href="#禁酒と健康" class="headerlink" title="禁酒と健康"></a>禁酒と健康</h2><h3 id="禁酒"><a href="#禁酒" class="headerlink" title="禁酒"></a>禁酒</h3><p>お腹に違和感があり、3 ヶ月間禁酒していた。お腹が鳴っている感覚が半月ほど続いており、念の為診察をした。エコー検査、レントゲン検査は異常なし、血液検査をしたところ膵臓に関わる数値が基準値をやや超えていた。「軽度の膵炎」という診断結果で、3 ヶ月お酒を控えて様子見となった。</p><p>お酒は週に数回程度、晩ごはん食べるときに一緒に飲む程度だった。大量に飲んで酔っ払うということはほぼなくなっていた。いざ禁酒してみると案外なんとかなった。外食のときは飲みたくなるときはあった。</p><p>結局、<strong>お酒は関係なかった</strong>。ちょうど引っ越しをしたので再検査は別の病院にした。基準値をやや超えていたのも体質であろうという見解になった。この数値ならそこまで大げさなものではなく、ほぼ個人差という診察であった。セカンドオピニオンは大事だと感じた。</p><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><p>禁酒期間は自分の健康を見直すいい機会となった。体組成計 (<a href="http://localhost:4000/the-best-things-2020/#8-Oura-Ring" target="_blank" rel="noopener">Oura Ring</a>) で日常の生活習慣を可視化するようにしたり、スタンディングデスクを購入したり、栄養や食品のことを勉強するようになった (<a href="https://www.youtube.com/channel/UCrPCzN6HOfK7FY2NJmKBeWg" target="_blank" rel="noopener">栄養チャンネル</a>みてる)。<a href="http://localhost:4000/the-best-things-2020/#8-Oura-Ring" target="_blank" rel="noopener">Oura Ring</a> は奥さんと一緒にはじめた。二人の数値を比べられて面白い。</p><h2 id="ゲーム"><a href="#ゲーム" class="headerlink" title="ゲーム"></a>ゲーム</h2><ul><li>ポケットモンスター ソード・シールド</li><li><a href="https://amzn.to/34Y2EP9" target="_blank" rel="noopener">スーパーマリオ 3Dコレクション</a></li><li><a href="https://amzn.to/2X4m6VT" target="_blank" rel="noopener">桃太郎電鉄 ~昭和 平成 令和も定番!</a></li><li>結局、PS 5 は未だに購入できていない</li></ul><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><p>COVID-19 の影響で海外旅行は行けなかった。GoTo Travel で青森に行った。</p><ul><li>1月: 愛知 (帰省)</li><li>11月: 青森</li></ul><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><p>地上波のテレビ番組を完全に観なくなった。代わりに YouTube を観ている。オンデマンドにいつでも好きなものを観れるのと、再生速度を変更できて字幕やスキップもできるなど機能的にもよい。単純にテレビは面白くないのと、ニュース番組でさえ観る価値がわからなくなった。</p><p>料理系 YouTuber を真似して実践するようになった 1 年だった。我が家では寝る前に YouTube を観ることを「夜食」と呼んでいる。<a href="https://www.youtube.com/user/toruteli" target="_blank" rel="noopener">きまぐれクック</a> や <a href="https://www.youtube.com/channel/UC1-4AnMxkLXLNL3-7UJ4KTQ" target="_blank" rel="noopener">谷やん</a> を寝る前の空腹しのぎとして観ていたのがその由来で、夜食は食べるものではなく観るものになった。夜食の中で食べたいものや料理したいものを奥さんと共有している YouTube リストに登録し、「何が食べたい？」となったらそこから選択するというルーティンが板についた。 </p><p>料理関係ないけど、<a href="https://www.youtube.com/channel/UCKa_NCzd8zhw3m3eDJojHAQ" target="_blank" rel="noopener">宋世羅の羅針盤ちゃんねる</a> にもハマった。</p><h2 id="2021-年"><a href="#2021-年" class="headerlink" title="2021 年"></a>2021 年</h2><p>30 歳になったので健康にも気をつかいつつ、適度にやっていきをやっていこうと思う。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;WFH になり、仕事や生活様式が劇的に変化した 1 年だった。&lt;strong&gt;変化に強いものが生き残る&lt;/strong&gt;ということを体感した。&lt;/p&gt;
&lt;h2 id=&quot;メルペイ&quot;&gt;&lt;a href=&quot;#メルペイ&quot; class=&quot;headerlink&quot; title=&quot;メルペイ&quot;
      
    
    </summary>
    
    
    
      <category term="year-review" scheme="https://blog.tanaka.world/tags/year-review/"/>
    
  </entry>
  
  <entry>
    <title>業務で英語を使うときの準備と実践ログ</title>
    <link href="https://blog.tanaka.world/english-2020/"/>
    <id>https://blog.tanaka.world/english-2020/</id>
    <published>2020-12-30T12:00:00.000Z</published>
    <updated>2020-12-31T04:35:28.871Z</updated>
    
    <content type="html"><![CDATA[<p>2019 年は業務で英語を使うための準備し、2020 年は実際に業務で英語を使うようになったこの 2 年間を振り返る。結論、1 年間英会話をして準備していたが実際はあまり役立たなかった。やみくもに準備に時間をかけるよりも、実践して必要なことがわかってからそれにフォーカスした対策をした方がよいという話。</p><h2 id="2019-年"><a href="#2019-年" class="headerlink" title="2019 年"></a>2019 年</h2><ul><li><strong><a href="/english-conversation-every-day-3-month">1年間毎日英会話やってた</a>があまり意味がなかった。</strong></li><li>意味があったのは体感 30 %くらい (後述)</li><li>このやり方であれば準備は 3 ヶ月とかもっと少なくても変わらなかったと思う</li><li>※ 前提<ul><li>英語を使い業務を遂行できることが第一目標、TOEIC などの試験で点を取ることは考えていない</li><li>業務はソフトウェア開発、読み書き・会話が英語になる</li><li>複数人のチーム</li></ul></li></ul><h3 id="何がよくなかったか"><a href="#何がよくなかったか" class="headerlink" title="何がよくなかったか"></a>何がよくなかったか</h3><h4 id="1-考えて話す機会が少ない"><a href="#1-考えて話す機会が少ない" class="headerlink" title="1. 考えて話す機会が少ない"></a>1. 考えて話す機会が少ない</h4><p>DMM 英会話ではフリートーク・デイリーニュースを中心に題材を選択していた。フリートーク（20 ％）、デイリーニュース（60 ％）、その他教材（20 ％）という割合だった。フリートークでは「その国で流行っているスマホアプリは？」というテーマで話していた。毎回違う先生を予約していたので同じ話題で問題はなかった。デイリーニュースではニュース本文を音読して、質問に答えるという内容だった。実質、十数分以下しか話せていない。</p><p>ただ話を聞いているだけ、書いてあるテキストを読んでいるだけでは身につかない。相手が話すのを聞いている時間より自分が話すチャンスを意識的に増やす、内容を要約して伝えるといった<strong>頭を使う</strong>学習方法の方が効果的だったと思う。</p><h4 id="2-使わない-間違ったフレーズを覚えてしまう"><a href="#2-使わない-間違ったフレーズを覚えてしまう" class="headerlink" title="2. 使わない/間違ったフレーズを覚えてしまう"></a>2. 使わない/間違ったフレーズを覚えてしまう</h4><p>業務と関係ない内容で学習していても、業務には直接活きないのは容易に想像がつくだろう。<strong>目的にフォーカスした内容を優先して学習するべき</strong>だった。実際の業務で「盆栽」の話をすることなどない。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">これ日本語でディスカッションするのもムズイw<br><br>&quot;$90,000 Bonsai Tree Stolen in Saitama&quot;<a href="https://t.co/6acxa3Bhip" target="_blank" rel="noopener">https://t.co/6acxa3Bhip</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1099982275930816512?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">February 25, 2019</a></blockquote><p>文法が間違っている時にそれに気づかず話しつづけてていたこともよくない。DMM 英会話の機能で講師から指摘の頻度を上げてもらうオプションがあったがそれを指定していても意味が通じれば何も言ってこないケースが大半だった。ニュアンスが通じればそれでよい説はあるとは思う。しかしそれ止まりでは効率が悪い。</p><h4 id="3-復習をしていない"><a href="#3-復習をしていない" class="headerlink" title="3. 復習をしていない"></a>3. 復習をしていない</h4><p>言わずもがな、何度か繰り返し復習をしないと忘れていく。盆栽の話を復習したところでそこまで効果はなかったと思うが。単語やフレーズを、業務のフォーマットに変換した上でインプットするなどの工夫が必要である。</p><h3 id="ただやるだけでも身についていたこと"><a href="#ただやるだけでも身についていたこと" class="headerlink" title="ただやるだけでも身についていたこと"></a>ただやるだけでも身についていたこと</h3><p>2020 年から業務で英語を使い始め「<strong>あまり意味がなかった</strong>」ということにすぐに気がついた。しかしその中でも役に立ったなと思うこともあり、それは体感 30 %くらいだった。残り 70% は実践をやることでしか身につかなかった。身についていたことは次の通り。</p><ul><li>リスニング力</li><li>発音</li><li>瞬発力（どうにかする力）</li></ul><p>英語話者の話していることを頭で理解するという行為を繰り返す過程で<strong>リスニング力</strong>はついていた。<a href="https://amzn.to/3pFcrlb" target="_blank" rel="noopener">英語耳</a>で繰り返し<strong>発音</strong>を学習し、それを会話で実践することで、意識しなくても正しい発音になるようになった。自分発音できる音は聞き取れるという状態になっている。</p><p>自分から何かを話し続ける・相手の問いかけに何かをレスポンスするというのを<strong>瞬発的</strong>にできるようになった。文法は間違っていてもコミュニケーションが成り立つようにはなっていたと思う。よい言い回しが出てこなくても、語彙をつなげてなんとかして伝える「<strong>どうにかする力</strong>」とも言えるかもしれない。このコミュニケーションスタイルは時間がかかる点とニュアンスがうまく伝わらないときがある点で効率が悪い。</p><h2 id="2020-年"><a href="#2020-年" class="headerlink" title="2020 年"></a>2020 年</h2><p>下記、雑なメモ。</p><h3 id="前半"><a href="#前半" class="headerlink" title="前半"></a>前半</h3><ul><li>カナダ出身の W 氏がチームにジョインした<ul><li>自分はメンターとなり同じプロジェクトで一緒に開発することになった。一応、英語だけで業務を推進することはできたが、もっとこうしておけばよかったということが大半だった</li><li>やってみないと本当に必要なことはわからない</li><li>自分だけが英語を話せてもダメでチームとしての受け入れ体制が必要だった。ドキュメントを英語・日本語で併記する、ミーティングを通訳してもらうなど。クレジットカードの法律など日本語でも理解が難しいものがあり、それは日本語がメインとなっている。</li></ul></li><li>W 氏が使っているフレーズをひたすらメモして自分も使うということを繰り返した<ul><li>3ヶ月くらいでメモする回数がかなり減っていた</li><li>それほど限られた語彙でも会話は一定成立した (ニュアンスがおかしかったり、違和感がある表現はあるかも)</li></ul></li><li>W 氏の日本語上達が速い<ul><li>日本人は英語学習・実践に充てている時間が圧倒的に少ない</li><li>圧倒的に時間をかけて学習している、かつ業務で実践しているからだと肌で感じた</li></ul></li><li>シンプルに話すための訓練が必要<ul><li>日本語でもうまく話せない事柄は英語でもうまく話せないと気づく</li><li>日本語では話しながら思考を整理していく＝ダラダラ長い話をしてしまう、ということがある</li><li>自分の中でポイントを整理できていれば、シンプルに短く要点を伝えてコミュニケーションできる（言語は問わない）</li><li>例えば、ネイティブは能動態を使ってシンプルに話す印象がある。日本人は受動態で話しがちでよけい複雑になっている、というケースがある</li><li>そもそもシンプルな英語表現しかできないのだから、事前に思考を整理した上で短いコミュニケーションが求められる</li></ul></li><li>英語は筋トレ<ul><li>数ヶ月、別プロジェクトにスポットで取り組むことになり、英語実践環境から離れる期間があった</li><li>数ヶ月後にはうまく話せなくなっていた</li><li>筋トレのように継続しないと衰えは早い</li></ul></li></ul><h3 id="後半"><a href="#後半" class="headerlink" title="後半"></a>後半</h3><ul><li>チームとして英語コミュニケーションの機会を増やしている<ul><li>例えば<a href="https://engineering.mercari.com/blog/entry/20201222-merpay-frontend/" target="_blank" rel="noopener">チーム内コミュニケーションで使う言語を英語に統一</a>するなどしている</li><li>一時的にストレッチ状態になり痛みは伴うが、その分皆が成長しているのがわかる</li></ul></li><li>やさしい日本語が難しい<ul><li>やさしい日本語は、スラングを使わないことや慣用句・熟語を使わないということが求められる</li><li>それを意識しながら話すのは非常に疲れる。逆も同じ。ネイティブが自分たちの英語レベルにあわせてやさしい英語を使うようにしてくれていると思うと、より早く上達せねばという気になる。</li></ul></li><li>やさしい英語が難しい<ul><li>比較的英語に慣れていない日本人に、日本人が話す英語が伝わらないことがある。</li><li>チームの共通言語集をもつことでその解決に役立った。例えば、<a href="https://github.com/mercari/engineer-vocabulary-list" target="_blank" rel="noopener">Engineer Vocabulary List in Japanese/English エンジニア向け日英ボキャブラリーリスト</a>が非常に実践的で役立った</li></ul></li></ul><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;2019 年は業務で英語を使うための準備し、2020 年は実際に業務で英語を使うようになったこの 2 年間を振り返る。結論、1 年間英会話をして準備していたが実際はあまり役立たなかった。やみくもに準備に時間をかけるよりも、実践して必要なことがわかってからそれにフォーカスした
      
    
    </summary>
    
    
    
      <category term="english" scheme="https://blog.tanaka.world/tags/english/"/>
    
  </entry>
  
  <entry>
    <title>2020年買ってよかったもの</title>
    <link href="https://blog.tanaka.world/the-best-things-2020/"/>
    <id>https://blog.tanaka.world/the-best-things-2020/</id>
    <published>2020-12-26T03:00:00.000Z</published>
    <updated>2020-12-26T04:11:14.620Z</updated>
    
    <content type="html"><![CDATA[<p>今年も色々買って・色々メルカリした。2 月からは完全にリモートワークになり、家の住環境・仕事環境を充実させることにお金を使った。Amazon での購入がメインで今年は「<strong>177件</strong>」注文していた。</p><p><img src="amazon-orders-2020.png" alt="amazon-orders-2020.png" title="amazon-orders-2020.png"></p><p>買ってよかったもの・今後も使い続けていくものを 10 個ピックアップした。</p><h2 id="1-引っ越し"><a href="#1-引っ越し" class="headerlink" title="1. 引っ越し"></a>1. 引っ越し</h2><p>引っ越しもサブスクの一つとして含めると「買った」ことにはなる。</p><p>1 LDK のリビングに作業デスク + チェアを二人分ならべて仕事をしていた。オンライン会議の声が被るので話すときは寝室や脱衣所に移動するなどしていたが限界だった。出勤することもなくなっていたので都心に住む理由もなかった。(結局 2 月末から 2 回しか出社していない)</p><ul><li>1LDK → 2LDK</li><li>家賃マイナス 3 万円</li><li>都心まで電車で 30分, 家から駅まで徒歩 15 分</li><li>日当たり良好</li></ul><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">引っ越しして1週間自然と早寝早起き生活になった。1番大きかったのは日当たりと風通しのよさで一気に健康になった気がする。窓1つ→窓5つに増えた。</p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1305733650382692352?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 15, 2020</a></blockquote><h2 id="2-Aterm-WX6000HP"><a href="#2-Aterm-WX6000HP" class="headerlink" title="2. Aterm WX6000HP"></a>2. Aterm WX6000HP</h2><p><a href="https://www.aterm.jp/product/atermstation/product/warpstar/wx6000hp/" target="_blank" rel="noopener">https://www.aterm.jp/product/atermstation/product/warpstar/wx6000hp/</a></p><p>WFH になってから一番最初に購入した。オンライン会議するときに映像 ON にすると不安定になる、音声だけでも不安定という状況だった。AirMac Extreme から乗り換えた。AirMac Extreme で IPv6 も設定は可能だったがうまく疎通できず断念していた。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">人権を取り戻した💪ルータを変えて IPoE が使えるようにした、平均 10Mbps くらいだったのが 250〜450Mbps 出るようになった⚡️ <a href="https://t.co/xsB78W8l9d" target="_blank" rel="noopener">pic.twitter.com/xsB78W8l9d</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1255133236784553987?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 28, 2020</a></blockquote><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B08762CG7B&linkId=f3bc0455b72dbd0db1485727989e8d78"></iframe><p>引っ越してから作業部屋は有線接続するようにしている。ルーターからドア 2 つ隔てた場所で接続が不安定だったため。100 均の両面テープで配線固定してて、今のところ剥がれることなく安定している。LAN をきしめん型の形状にしてよかった。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">20mLANで家庭内有線LAN整備した👨🏻‍🔧 <a href="https://t.co/MB0MHTwrfH" target="_blank" rel="noopener">pic.twitter.com/MB0MHTwrfH</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1309690556314910720?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 26, 2020</a></blockquote><h2 id="3-LG-モニター-ディスプレイ-34WL75C-B-34インチ-曲面ウルトラワイド"><a href="#3-LG-モニター-ディスプレイ-34WL75C-B-34インチ-曲面ウルトラワイド" class="headerlink" title="3. LG モニター ディスプレイ 34WL75C-B 34インチ/曲面ウルトラワイド"></a>3. LG モニター ディスプレイ 34WL75C-B 34インチ/曲面ウルトラワイド</h2><p>もう平面ディスプレイには戻れない。ブラウザ, IDE, Slack など 3 画面を同時に並べて作業している。このディスプレイはスピーカーがついていない。 </p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B07XYVNHGH&linkId=9e847667395d31689ba8d40164ce702a"></iframe><h2 id="4-エルゴトロン-LX-デスクマウント-モニターアーム-ホワイト-補強プレート"><a href="#4-エルゴトロン-LX-デスクマウント-モニターアーム-ホワイト-補強プレート" class="headerlink" title="4. エルゴトロン LX デスクマウント モニターアーム ホワイト + 補強プレート"></a>4. エルゴトロン LX デスクマウント モニターアーム ホワイト + 補強プレート</h2><p>作業環境を紹介している YouTuber の影響で購入した。座るポジションに応じて自由に移動でき首への負担が減った。（たぶん）</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01FW15TV6&linkId=53f90c5ed681ad27d74148928b4f9b57"></iframe><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B004BQ0OGY&linkId=4942f8943596f7d18734445302269b27"></iframe><h2 id="5-FLEXISPOT"><a href="#5-FLEXISPOT" class="headerlink" title="5. FLEXISPOT"></a>5. FLEXISPOT</h2><p>重量がエグいことで有名な電動スタンディングデスク。<a href="https://flexispot.jp/e3-set.html" target="_blank" rel="noopener">E3</a> を購入した。高さを記憶してボタンひとつでその高さに変えられるのがよい。最新の <a href="https://flexispot.jp/e7-set.html" target="_blank" rel="noopener">E7</a> は欲しかったホワイトカラーが売り切れだった。</p><p>最終的な作業環境はこんな感じになっている。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr"><a href="https://twitter.com/hashtag/mynewgear?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#mynewgear</a> 🎅FLEXISPOT E3 (ケーブルをどうにかしたい <a href="https://t.co/9EslLMTA9u" target="_blank" rel="noopener">pic.twitter.com/9EslLMTA9u</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1339437322517897216?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 17, 2020</a></blockquote><h2 id="6-StreamCam-C980OW"><a href="#6-StreamCam-C980OW" class="headerlink" title="6. StreamCam C980OW"></a>6. StreamCam C980OW</h2><p>USB-C で直接接続できるのがよかった。上記ディスプレイを使うときはクラムシェルモードにしており、Laptop のカメラは使っていない。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B086R4VGVX&linkId=cfc14d676aa8398267ba19d28d8fc9dc"></iframe><h2 id="7-シチズン-超音波洗浄器-SWT710"><a href="#7-シチズン-超音波洗浄器-SWT710" class="headerlink" title="7. シチズン 超音波洗浄器 SWT710"></a>7. シチズン 超音波洗浄器 SWT710</h2><p>約 4 年前から歯の矯正をしていて、現在も保定用のマウスピースを常用している。歯ブラシでは掃除しきれない汚れが完全に落ちる。マウスピース矯正しているときにも欲しかった商品。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B01835WAB0&linkId=ead1f8fb79a7fa6de8ad806efc1e8f40"></iframe><h2 id="8-Oura-Ring"><a href="#8-Oura-Ring" class="headerlink" title="8. Oura Ring"></a>8. Oura Ring</h2><p><a href="https://ouraring.com/" target="_blank" rel="noopener">https://ouraring.com/</a></p><p>同僚がブラックフライデーセールをやっているのを教えてくれて、1 万円引きくらいで買ってみた。活動量計的なものは 2013 年以来。自分の体調が数値化されていて体感とかなり近くて驚いた。日頃の食生活や運動量が、睡眠の質やパフォーマンスに影響していることを実感している。</p><h2 id="9-タブレット-スタンド"><a href="#9-タブレット-スタンド" class="headerlink" title="9. タブレット スタンド"></a>9. タブレット スタンド</h2><p>iPad Pro を設置して寝る前に YouTube や Netflix みるのに使っている。手ぶら最高。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B085Q4R7YC&linkId=1dab06133053a9a1a7beea8ae43745ed"></iframe><h2 id="10-浄水"><a href="#10-浄水" class="headerlink" title="10. 浄水"></a>10. 浄水</h2><p>ペットボトル水を購入して飲んでいたのをやめて、浄水機を使い始めた。明らかに飲める水に変わるのがわかる。ペットボトルゴミも激減した。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B00KF3DVM6&linkId=657dda810b9ca1b988a41af38e8e2e1c"></iframe><p>水はこのボトルにいれて毎日 1 リットル飲んでいる。</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B078HSHJ8D&linkId=36545f58664045c82d881027ce0e93c1"></iframe><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年も色々買って・色々メルカリした。2 月からは完全にリモートワークになり、家の住環境・仕事環境を充実させることにお金を使った。Amazon での購入がメインで今年は「&lt;strong&gt;177件&lt;/strong&gt;」注文していた。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;amazon
      
    
    </summary>
    
    
    
      <category term="the-best-things" scheme="https://blog.tanaka.world/tags/the-best-things/"/>
    
  </entry>
  
  <entry>
    <title>Proff の本番環境を刷新した（ECS/Fargate）</title>
    <link href="https://blog.tanaka.world/revamp-proff-io-infra-ecs-fargate/"/>
    <id>https://blog.tanaka.world/revamp-proff-io-infra-ecs-fargate/</id>
    <published>2020-07-13T03:00:00.000Z</published>
    <updated>2020-12-25T03:35:42.894Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://proff.io/" target="_blank" rel="noopener">Proff（プロフ）</a>の本番環境を刷新した。2018 年から約 2 年ほど運用してきて初の大規模インフラ改修となった。</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR;"></a>TL;DR;</h2><ul><li>EC2 → ECS(Fargate) に変更</li><li>静的アセットを S3 から配信するように変更</li><li>CircleCI Orbs を使用し Docker ビルド</li><li>Terraform で構成管理</li></ul><h2 id="サービス構成"><a href="#サービス構成" class="headerlink" title="サービス構成"></a>サービス構成</h2><h4 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h4><p>既存の本番環境とは別に VPC を作成し、関連する AWS サービスもほぼ全部新規に作成した(S3 以外)。というのも、まず新構成の開発環境を構築して色々と検証をした上で、まったく同じ構成で本番環境を構築したかったから。Terraform の workspace 切り替えで検証済みの構成と同等の設定で本番環境も作成した。CPU や Memory などスペックは本番向けに増強している。</p><p>主な変更点は下記の通り。</p><table><thead><tr><th>Before</th><th>After</th></tr></thead><tbody><tr><td>ELB</td><td>ALB (Application Load Balancer) に変更</td></tr><tr><td>EC2 (Nginx, RoR, Node.js)</td><td>ECS + Fargate (RoR, Node.js) に変更 <br>静的コンテンツを S3 から配信 (<a href="https://github.com/AssetSync/asset_sync" target="_blank" rel="noopener">asset_sync</a>)</td></tr><tr><td>-</td><td>ECR (Docker Registry)</td></tr><tr><td>-</td><td>System Manager (ECS で使う秘匿情報を Parameter Store で保存)</td></tr><tr><td>Capistrano</td><td>CircleCI で Docker ビルド <br>(Orb を使用: <a href="https://circleci.com/orbs/registry/orb/circleci/aws-ecr" target="_blank" rel="noopener">circleci/aws-ecr</a>, <a href="https://circleci.com/orbs/registry/orb/circleci/aws-ecs" target="_blank" rel="noopener">circleci/aws-ecs</a>)</td></tr></tbody></table><h4 id="サービス選定"><a href="#サービス選定" class="headerlink" title="サービス選定"></a>サービス選定</h4><p>一番の目的は本番環境をコンテナ化することだった。IoC (Infrastructure as Code) したい、環境差分をなくしたい (ローカル, 本番, CI)、スケールを容易にしたい、というのが主な狙い。コンテナ化しない理由は逆になく ECS を選択した。</p><p>Fargate にした理由は、単純な興味と、なるべく運用のことを気にかけずにアプリケーション開発に集中したかったから。EKS (Elastic Kubernetes Service) は、ほぼ 1 人開発な現状に対してオーバースペックなので選択しなかった。料金は割高になる可能性があるので注視していく。</p><p>Heroku や GCP も検討したが、AWS 中心にスタックを固めておきたく断念した。別サービスで Heroku 運用をしてみたところ手軽さがかなりよかったが、Plugin に課金してそれなりのスペックを用意すると、月額コストは AWS とあまり変わらなそうだった。Heroku を使うなら Heroku で固めたい。同様に、会社業務で使っている GCP にも興味はありつつも、既に AWS で運用中のものを別クラウドに移行する旨味はなかった。 </p><h2 id="Dockernize"><a href="#Dockernize" class="headerlink" title="Dockernize"></a>Dockernize</h2><h4 id="共通イメージ"><a href="#共通イメージ" class="headerlink" title="共通イメージ"></a>共通イメージ</h4><p>コンテナは一つで Ruby, Node.js を動かしている。ベースとなるイメージを <a href="https://hub.docker.com/r/tanakaworld/ruby-2.6.2-node-12.16.3" target="_blank" rel="noopener">https://hub.docker.com/r/tanakaworld/ruby-2.6.2-node-12.16.3</a> に共通化し、ECS 上で動かすコンテナの Dockerfile <em>(1)</em> と CircleCI 上 <em>(2)</em> で参照している。CircleCI が用意してくれている <a href="https://circleci.com/docs/2.0/circleci-images/#ruby" target="_blank" rel="noopener">Ruby の Docker イメージ</a>だと Node.js のバージョンが制御できなかったので自前で共通イメージを用意した。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Base</span></span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">12.16</span>.<span class="number">3</span> as node</span><br><span class="line"><span class="keyword">FROM</span> ruby:<span class="number">2.6</span>.<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 共通のカスタマイズ</span></span><br><span class="line"><span class="comment"># - Puppeteer 向けのパケージインストール</span></span><br><span class="line"><span class="comment"># - `node`, `yarn` を node イメージからコピー</span></span><br><span class="line"><span class="comment"># - Bundler を v2.x 系に更新</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (1) docker/rails/Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> tanakaworld/ruby-<span class="number">2.6</span>.<span class="number">2</span>-node-<span class="number">12.16</span>.<span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (2).circleci/config.yml</span></span><br><span class="line"><span class="attr">executors:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">docker:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tanakaworld/ruby-2.6.2-node-12.16.3</span></span><br></pre></td></tr></table></figure><h4 id="Puppeteer"><a href="#Puppeteer" class="headerlink" title="Puppeteer"></a>Puppeteer</h4><p>Proff には履歴書の PDF 生成書き出し機能があり、裏側では <a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a> が使われている。Puppeteer をイメージ内に同梱しているのでサイズが大きくなってしまっている。PDF 生成機能の利用シーンは他機能より少ないので別コンテナに切り出したい（Rails をスケールするときに無駄に Puppeteer もスケールしてしまう現状）。</p><h4 id="静的コンテンツの扱い"><a href="#静的コンテンツの扱い" class="headerlink" title="静的コンテンツの扱い"></a>静的コンテンツの扱い</h4><p><code>assets:precompile</code> を Docker ビルド時に実行し、<a href="https://github.com/AssetSync/asset_sync" target="_blank" rel="noopener">AssetSync/asset_sync</a> で S3 に転送している、<code>ENTRYPOINT</code> でアプリケーション起動前のタスク (DB マイグレーション、sitemap の動的更新など) を実行している。<a href="https://github.com/progrium/entrykit" target="_blank" rel="noopener">progrium/entrykit</a> を使用している。<code>assets:precompile</code> + <code>assets:sync</code> を <code>ENTRYPOINT</code> で実行している例をよく見かけるが、コンテナが N 台動くときに N 回実行され無駄なのと起動が遅くなるので、イメージ:アセット=1:1 になるようにした。</p><h2 id="Build-Deploy"><a href="#Build-Deploy" class="headerlink" title="Build + Deploy"></a>Build + Deploy</h2><h4 id="Capistrano-から-CircleCI-Orbs-に移行"><a href="#Capistrano-から-CircleCI-Orbs-に移行" class="headerlink" title="Capistrano から CircleCI Orbs に移行"></a>Capistrano から CircleCI Orbs に移行</h4><p><a href="https://github.com/capistrano/capistrano" target="_blank" rel="noopener">Capistrano</a> を廃止した。変わりに CircleCI 上で Docker ビルドし ECR に push する処理を実行している。CircleCI Orbs を使用した。<code>ecs-cli</code> のインストールや Docker コマンドの扱いなどを隠蔽してくれていて楽だった。</p><ul><li><a href="https://circleci.com/orbs/registry/orb/circleci/aws-ecr" target="_blank" rel="noopener">circleci/aws-ecr</a></li><li><a href="https://circleci.com/orbs/registry/orb/circleci/aws-ecs" target="_blank" rel="noopener">circleci/aws-ecs</a></li></ul><p>ECR に push する他、Docker ビルド時に <code>assets:sync</code> するために AWS ID / Secret が必要になる。CircleCI の <a href="https://circleci.com/docs/2.0/contexts/" target="_blank" rel="noopener">Contexts</a> で環境ごとの変数を管理するようにした。<a href="https://aws.amazon.com/codebuild/" target="_blank" rel="noopener">CodeBuild</a> や <a href="https://aws.amazon.com/codedeploy/" target="_blank" rel="noopener">CodeDeploy</a> を使うと、AWS 上で全てが完結するので秘匿情報の扱いがより安全にできそうではある。AWS 料金が嵩むのを懸念して今回は断念した。</p><h4 id="課題"><a href="#課題" class="headerlink" title="課題"></a>課題</h4><p>いくつか問題があって対策していきたい。</p><ul><li>イメージサイズを小さくする</li><li>ビルド時間が長い問題を解決していきたい</li><li>対策としては Docker レイヤーキャッシュ周りを見直す</li><li>Puppeteer を別コンテナとして動かすようにする</li><li><code>assets:precompile</code> 遅いのをどうにかする。webpacker 使っているけど、Frontend のビルドは Rails の仕組みから外してもよいかも。</li></ul><h2 id="Terraform-で構成管理"><a href="#Terraform-で構成管理" class="headerlink" title="Terraform で構成管理"></a>Terraform で構成管理</h2><p>AWS サービスの作成手順をまとめたオレオレドキュメントが秘伝のタレ化していた (悪い意味)。会社業務では雛形としてつくられた .tf ファイルを使って運用することはあるが、個人開発で IaC をまともにやったことがなく、フルスクラッチでつくったのはとても勉強になった。</p><p>既存リソースを import するのではなくほぼすべて新規作成した。新構成の検証をするための開発環境が新規作成だったため、本番もそれと同じにしたかったため。</p><p>インフラ設定が宣言的に記述できてよいというのは言わずもがなだが、秘伝のタレをもとにした手作業がなくなったこと、設定をミスしたときの依存関係の削除がコマンドで完結すること、命名規則を変数で共通定義できた。</p><p>また、秘匿情報の扱いが安全にできたのがよかった。例えば、IAM に作成したユーザーの ID / Secret を System Manager の Parameter Store に追加して、アプリケーション側にはそのキー名だけ設定するといったことができる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// User 作成</span><br><span class="line">resource &quot;aws_iam_user&quot; &quot;app&quot; &#123;</span><br><span class="line">  name = &quot;app-$&#123;var.name&#125;-$&#123;terraform.workspace&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line">resource &quot;aws_iam_access_key&quot; &quot;app-user-key&quot; &#123;</span><br><span class="line">  user = aws_iam_user.app.name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Parameter Store に登録</span><br><span class="line">resource &quot;aws_ssm_parameter&quot; &quot;app_iam_secret&quot; &#123;</span><br><span class="line">  name  = &quot;/$&#123;var.name&#125;_$&#123;terraform.workspace&#125;/app/iam/secret&quot;</span><br><span class="line">  type  = &quot;SecureString&quot;</span><br><span class="line">  value = aws_iam_access_key.app-user-key.secret</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ECS で秘匿情報を参照</span><br><span class="line">resource &quot;aws_ecs_task_definition&quot; &quot;app&quot; &#123;</span><br><span class="line">  container_definitions    = &lt;&lt;DEFINITION</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;environment&quot;: [</span><br><span class="line">      &#123; &quot;name&quot;: &quot;APP_ENV&quot;, &quot;value&quot;: &quot;$&#123;terraform.workspace&#125;&quot; &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;secrets&quot;: [</span><br><span class="line">      &#123; &quot;name&quot;: &quot;AWS_SECRET_ACCESS_KEY&quot;, &quot;valueFrom&quot;: &quot;$&#123;aws_ssm_parameter.app_iam_secret.name&#125;&quot; &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">DEFINITION</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最終的なファイル構成はこんな感じ。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ tree .</span><br><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── main.tf</span><br><span class="line">├── modules</span><br><span class="line">│   ├── alb.tf</span><br><span class="line">│   ├── bastion.tf</span><br><span class="line">│   ├── cloudwatch.tf</span><br><span class="line">│   ├── ecr_repository.tf</span><br><span class="line">│   ├── ecs.tf</span><br><span class="line">│   ├── iam_policy.tf</span><br><span class="line">│   ├── iam_role.tf</span><br><span class="line">│   ├── iam_user.tf</span><br><span class="line">│   ├── igw.tf</span><br><span class="line">│   ├── nat.tf</span><br><span class="line">│   ├── output.tf</span><br><span class="line">│   ├── parameter_store.tf</span><br><span class="line">│   ├── rds.tf</span><br><span class="line">│   ├── route_table.tf</span><br><span class="line">│   ├── security_group.tf</span><br><span class="line">│   ├── subnet.tf</span><br><span class="line">│   ├── variables.tf</span><br><span class="line">│   └── vpc.tf</span><br><span class="line">└── versions.tf</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><ul><li>Dockernize によって開発・運用しやすい構成にできた。</li><li>途中から Terraform を使う方針に切り替えたのだが、調査にかけたコストを大きく上回るリターンがあった。No Terraform No Life.</li><li>ECS や Fargate の挙動周り、Terraform のベストプラクティスは、詳しい人に聞ける機会があるとよかったかもしれない。コンテナが正常に動作するまでに色々と四苦八苦した。そもそも概念に対する知識不足から、IAM の権限が足りない、セキュリティグループの設定、ALB のヘルスチェックが Basic Auth にブロックされいたなど単純な問題にハマっていた。自分はインフラ周りが得意ではないので、スポットでインフラレビューしてくれるエンジニアいたらありがたい。</li><li>今回のリニューアルはアプリケーション開発に集中するのが最終目的なので、開発に邁進していきたい</li></ul><h2 id="参考にしたリンク集"><a href="#参考にしたリンク集" class="headerlink" title="参考にしたリンク集"></a>参考にしたリンク集</h2><ul><li>Getting started with Amazon ECS using Fargate<br>  <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/getting-started-fargate.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/getting-started-fargate.html</a></li><li>What is AWS Fargate?<br>  <a href="https://docs.aws.amazon.com/AmazonECS/latest/userguide/what-is-fargate.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/AmazonECS/latest/userguide/what-is-fargate.html</a></li><li>Terraform Documentation<br>  <a href="https://www.terraform.io/docs/index.html" target="_blank" rel="noopener">https://www.terraform.io/docs/index.html</a></li><li>AWS FargateとTerraformで最強＆簡単なインフラ環境を目指す<br>  <a href="https://qiita.com/tarumzu/items/2d7ed918f230fea957e8" target="_blank" rel="noopener">https://qiita.com/tarumzu/items/2d7ed918f230fea957e8</a></li><li>AWS FargateでNginxを動かしてみる<br>  <a href="https://qiita.com/riywo/items/b223bdad2b3ae3bebf55" target="_blank" rel="noopener">https://qiita.com/riywo/items/b223bdad2b3ae3bebf55</a></li><li>AWS FargateでRuby on Railsを動かしてみる<br>  <a href="https://qiita.com/riywo/items/3874fe1a9f11658b8396" target="_blank" rel="noopener">https://qiita.com/riywo/items/3874fe1a9f11658b8396</a></li><li>Deploy Rails in Amazon ECS: Part 3 - Create the RDS database, Task Definition, and Load Balancer<br>  <a href="https://dev.to/jamby1100/deploy-rails-in-amazon-ecs-part-3-create-the-rds-database-task-definition-and-load-balancer-1ffe" target="_blank" rel="noopener">https://dev.to/jamby1100/deploy-rails-in-amazon-ecs-part-3-create-the-rds-database-task-definition-and-load-balancer-1ffe</a></li><li>既存のAWS環境を後からTerraformでコード化する<br>  <a href="https://dev.classmethod.jp/articles/aws-with-terraform" target="_blank" rel="noopener">https://dev.classmethod.jp/articles/aws-with-terraform</a></li><li>production環境でRailsアプリをdockerコンテナとしてECSで運用するために考えたこと<br>  <a href="https://qiita.com/joker1007/items/b8a932c1ae29705cef8d" target="_blank" rel="noopener">https://qiita.com/joker1007/items/b8a932c1ae29705cef8d</a></li><li>RailsアプリをECSで本番運用するためのStep by Step<br>  <a href="https://joker1007.github.io/slides/rails_on_ecs/slides/#/" target="_blank" rel="noopener">https://joker1007.github.io/slides/rails_on_ecs/slides/#/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://proff.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Proff（プロフ）&lt;/a&gt;の本番環境を刷新した。2018 年から約 2 年ほど運用してきて初の大規模インフラ改修となった。&lt;/p&gt;
&lt;h2 id=&quot;TL-
      
    
    </summary>
    
    
    
      <category term="proff.io" scheme="https://blog.tanaka.world/tags/proff-io/"/>
    
      <category term="AWS" scheme="https://blog.tanaka.world/tags/AWS/"/>
    
      <category term="ECS" scheme="https://blog.tanaka.world/tags/ECS/"/>
    
      <category term="Fargate" scheme="https://blog.tanaka.world/tags/Fargate/"/>
    
      <category term="Docker" scheme="https://blog.tanaka.world/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Life From Home</title>
    <link href="https://blog.tanaka.world/life-from-home-covid-19/"/>
    <id>https://blog.tanaka.world/life-from-home-covid-19/</id>
    <published>2020-05-11T01:53:01.000Z</published>
    <updated>2020-12-25T03:35:42.893Z</updated>
    
    <content type="html"><![CDATA[<p>COVID-19 の影響で 2 月末から家中心の生活になった。仕事や個人プロジェクトでも約 3 ヶ月間一度も物理出社はしていない。色々変化があったので振り返る。</p><h2 id="仕事"><a href="#仕事" class="headerlink" title="仕事"></a>仕事</h2><h4 id="WFH"><a href="#WFH" class="headerlink" title="WFH"></a>WFH</h4><p>WFH は基本的に<strong>推奨されていない</strong>、事情によっては OK という文化だった。それが昨今の事情で WFH 推奨 → WFH 原則という風に変わってきた。<br>会社が G Suite を使っているので会議はすべて Google Meet になった。全社会議など多くの人が集まる会議で自分が話す必要がないときは Live Stream を使っている。Live Stream は <a href="https://support.google.com/meet/answer/9308630?co=GENIE.Platform%3DDesktop&hl=en" target="_blank" rel="noopener">10　万人までストリーミング配信できる</a>らしくすごい。<br>物理会議だと会議室を抑えるのが大変だったが、今はその手間がなくなった。</p><h4 id="生産性"><a href="#生産性" class="headerlink" title="生産性"></a>生産性</h4><p>個人としての生産性は明らかに落ちているのを感じていている。テキストチャットのコミュニケーションが中心になり、テキスト読んで理解する → 文章書くという繰り返しが増え、時間取られている。当初はそれに疲れを感じていたが最近は慣れた。タイミング的に兼務プロジェクトが増えたのも影響しているのかもしれないので一概には言えないが。皆がチャット上でわかりやすい文章書く手法を研究していく必要がある。<br>対面の同期コミュニケーションのスピード感を思い知った。通勤の往復時間がなくなり作業可能な時間は増えているが、メリハリはなくなりダラダラと仕事を継続してしまう傾向にある。<br>3 月から新たにジョインしたメンバーが多数いて、一度も物理対面していないのは新鮮な体験だった。オンボーディングから普段の開発まで全てリモートで行っている。プロジェクトの立ち上げやオンボーディングは対面の方が効率よいと感じた。</p><h2 id="衣"><a href="#衣" class="headerlink" title="衣"></a>衣</h2><p>断捨離して着る服を限界まで減らしていたにも関わらず、さらに服を着なくなった。部屋着と寝衣の 2 パターンで生活が完結するので断捨離がより捗りそう。気兼ねなく洗濯ができるようになったのも大きい。思い切ってもう少し断捨離してみようと思う。</p><p>自分は喉が弱く乾燥で喉が痛くなり熱が出がち、故に冬になると外出時は常にマスクをしている。これまでは不織布の使い捨てマスクを使っていたのだが、最近は洗って再利用できる <a href="https://amzn.to/2SSVaqC" target="_blank" rel="noopener">PITTA MASK</a> を常用している。<br><a href="https://www.amazon.co.jp/%E3%83%94%E3%83%83%E3%82%BF%E3%83%9E%E3%82%B9%E3%82%AF-PITTA-MASK-GRAY-3%E6%9E%9A%E5%85%A5/dp/B00PRO3PB0/ref=as_li_ss_il?ie=UTF8&linkCode=li1&tag=tanakayutaroa-22&linkId=24787d7b7bb71b2740d795151a224a19&language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B00PRO3PB0&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=tanakayutaroa-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=tanakayutaroa-22&language=ja_JP&l=li1&o=9&a=B00PRO3PB0" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p>PITTA MASK は毎日手洗いしても 1 ヶ月くらいは使い続けていた。外に出る機会が激減したのでマスクが足りなくなることがなかった。</p><h2 id="食"><a href="#食" class="headerlink" title="食"></a>食</h2><p>Uber Eats を始め宅配メシや外食中心だったのが、現在はほぼ 3 食自炊に変わった。4 月からは相方氏も WFH になり食事をつくってくれているのがとても大きい。本当に感謝。自分もたまにスパイスからカレーつくったりステーキを焼いたりしている。もっと料理できるようになりたい。</p><p>週 1 回スーパーに物理買い出しをしている。その他、<a href="https://cookpad-mart.com/" target="_blank" rel="noopener">クックパッドマート</a>をリピートしている。品揃え良く、値段もそこまで高くないし、翌日届く。Amazon で直送野菜を試したが高かった。</p><p>購入したものを置く場所がなかったためラックを購入した。</p><p><a href="https://www.amazon.co.jp/gp/product/B005KOLP14/ref=as_li_ss_il?ie=UTF8&psc=1&linkCode=li1&tag=tanakayutaroa-22&linkId=ffbd1f7c8157884d6f8c2c6ed845b684&language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B005KOLP14&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=tanakayutaroa-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=tanakayutaroa-22&language=ja_JP&l=li1&o=9&a=B005KOLP14" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p>冷蔵庫が一人暮らし用で小さい。買い出しの頻度を抑えるためにもデカイ冷蔵庫が欲しい。</p><h2 id="住"><a href="#住" class="headerlink" title="住"></a>住</h2><h4 id="作業スペース"><a href="#作業スペース" class="headerlink" title="作業スペース"></a>作業スペース</h4><p>元々リビングに一人が作業できるスペースは完備されていたが、部屋の模様替えをしてそれを拡張した。<br>相方氏の椅子を新調し、リビングに二人並んで作業できるようにしている。</p><p><a href="https://amzn.to/2SVmMv8" target="_blank" rel="noopener">Ergohuman オフィスチェア エンジョイ ハイタイプ EJ-HAM WH (KM-16)</a><br><a href="https://www.amazon.co.jp/gp/product/B0040JGOMU/ref=as_li_ss_il?ie=UTF8&psc=1&linkCode=li1&tag=tanakayutaroa-22&linkId=700b5fdfb21678c5be334b6562a43d61&language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B0040JGOMU&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=tanakayutaroa-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=tanakayutaroa-22&language=ja_JP&l=li1&o=9&a=B0040JGOMU" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><p>テレカンの時間が被るときはどっちかが寝室に移動する。もし WFH が長期で続くようなら引っ越ししてより快適な生活にしてみたい。個室と🐕が欲しい。</p><p>スタンディングデスクを試したが足・腰にきて 3 日で挫折してしまった。最近はテレカンのときにだけスタンディングすることがあったりなかったり。</p><h4 id="居間"><a href="#居間" class="headerlink" title="居間"></a>居間</h4><p><a href="/minimalism-in-2019/#%F0%9F%93%BA-%E3%83%86%E3%83%AC%E3%83%93%EF%BC%88%E6%9D%B1%E8%8A%9D-REGZA-32%E3%82%A4%E3%83%B3%E3%83%81-%E6%B6%B2%E6%99%B6%E3%83%86%E3%83%AC%E3%83%93%EF%BC%89">過去に TV を捨ててから</a> 24 inch のモニタ + AppleTV で Netflix やゲームをしていた。二人で映画観るのには小さい、快適さを求め大きめのモニタを購入した。モニタ内蔵スピーカーの最少音が大きすぎてやや困っている。</p><p><a href="https://amzn.to/2WIi7hf" target="_blank" rel="noopener">Acer 4K モニター ディスプレイ OmegaLine 43インチ DM431Kbmiiipfx IPS HDMIx3 DisplayPort HDR スピーカー内蔵 ブルーライト軽減 リモコン付</a><br><a href="https://www.amazon.co.jp/gp/product/B07R1VS2LJ/ref=as_li_ss_il?ie=UTF8&psc=1&linkCode=li2&tag=tanakayutaroa-22&linkId=91b6d79763d0ebf3f29a6cabd1f371d0&language=ja_JP" target="_blank"><img border="0" src="//ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=B07R1VS2LJ&Format=_SL160_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=tanakayutaroa-22&language=ja_JP" ></a><img src="https://ir-jp.amazon-adsystem.com/e/ir?t=tanakayutaroa-22&language=ja_JP&l=li2&o=9&a=B07R1VS2LJ" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p><h4 id="WiFi-ルータ"><a href="#WiFi-ルータ" class="headerlink" title="WiFi ルータ"></a>WiFi ルータ</h4><p><a href="https://support.apple.com/airport" target="_blank" rel="noopener">AirPort Extreme</a> を使っていて、常時 10 Mbps くらいしか速度が出ず仕事にも支障をきたしていた。</p><p><a href="http://fushiroyama.hatenablog.com/entry/2020/04/08/001810" target="_blank" rel="noopener">ネットが遅いのでIPv6 IPoE + DS-Liteにした</a> などを見て IPoE を試してみた。プロバイダは IPv6 オプション契約済みだったが、AirPort Extreme で IPoE 設定するとエラーになりダメだった（公式の情報は出てこなかったが日本の IPv6 は対応していないというような記述を何件か見かけた）。</p><p><a href="https://www.aterm.jp/product/atermstation/product/warpstar/wx6000hp/" target="_blank" rel="noopener">Aterm WX6000HP</a> に買い替えた。ルータに関してはあまり詳しくなく、会社 Slack で探したり聞いて決断した。3.5万円くらいとやや高かったが今のところ 2020年で一番買ってよかった。プロバイダは特に変更してなく引き続きマンションタイプの契約。</p><p>体感もかなり変化を感じている。Slack や JIRA の読み込み待ちが格段に減ったり、Kindle や Podcast のダウンロードが一瞬で終わるようになった。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">人権を取り戻した💪ルータを変えて IPoE が使えるようにした、平均 10Mbps くらいだったのが 250〜450Mbps 出るようになった⚡️ <a href="https://t.co/xsB78W8l9d" target="_blank" rel="noopener">pic.twitter.com/xsB78W8l9d</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1255133236784553987?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 28, 2020</a></blockquote><h2 id="気晴らし"><a href="#気晴らし" class="headerlink" title="気晴らし"></a>気晴らし</h2><h4 id="散歩"><a href="#散歩" class="headerlink" title="散歩"></a>散歩</h4><p>往復の通勤で毎日 5000 歩ほどは歩いていたのが 100 歩とかに減ってしまっていた。流石にヤバさを感じ先月末から深夜にウォーキングするようになった。相方氏とほぼ毎日続けている。一時期、目のクマがひどかったがウォーキング初めてから解消された。</p><h4 id="動画"><a href="#動画" class="headerlink" title="動画"></a>動画</h4><p>生活の中心が YouTube と Netflix になっている。COVID-19 関連のニュースでネガティブな気持ちになることを想像すると TV は捨ててよかった。</p><p><strong>継続</strong></p><ul><li>YouTube Premium<ul><li>英語系・料理系を中心に毎日みている</li><li>多いので別途まとめる</li></ul></li><li>Netflix<ul><li>殺人を無罪にする方法 - シーズン1</li><li>LOST - シーズン1</li><li>SLAM DUNK</li><li>BLEACH</li><li>他映画いくつか</li></ul></li><li>Amazon Prime Video<ul><li>映画いくつか</li></ul></li></ul><p><strong>解約した</strong></p><ul><li>Disney Plus (スターウォーズシリーズをみた)</li><li>FOD (<a href="https://fod.fujitv.co.jp/s/genre/anime/ser5a86/" target="_blank" rel="noopener">映像研には手を出すな！</a> とドラゴンボール GT をみた)</li><li>U-NEXT (独占配信されている作品をみるために登録して無料期間中に退会した)</li><li>Hulu (もう何もみなくなった)</li></ul><h4 id="ゲーム"><a href="#ゲーム" class="headerlink" title="ゲーム"></a>ゲーム</h4><p><a href="https://amzn.to/3fEIEEL" target="_blank" rel="noopener">ゼルダの伝説 夢をみる島 -Switch</a> をやった。原作はプレイしたことなく初。</p><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">あつもり、完クリした！ <a href="https://twitter.com/hashtag/%E3%82%BC%E3%83%AB%E3%83%80%E3%81%AE%E4%BC%9D%E8%AA%AC?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#ゼルダの伝説</a> <a href="https://twitter.com/hashtag/%E5%A4%A2%E3%82%92%E3%81%BF%E3%82%8B%E5%B3%B6?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#夢をみる島</a> <a href="https://twitter.com/hashtag/NintendoSwitch?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#NintendoSwitch</a> <a href="https://t.co/6CUUaJwypl" target="_blank" rel="noopener">pic.twitter.com/6CUUaJwypl</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1246374301478948869?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 4, 2020</a></blockquote><p>その他、WiiU を引っ張りだして昔のゲームをやっている。直近はゼルダシリーズでやったことがなかったソフトをやった。スカイウォードソードはモーション操作限定で難しすぎて挫折した。</p><ul><li><a href="https://amzn.to/2AimbgL" target="_blank" rel="noopener">ゼルダの伝説 トワイライトプリンセス HD - Wii U</a></li><li><a href="https://amzn.to/2WNlJPd" target="_blank" rel="noopener">ゼルダの伝説 スカイウォードソード</a></li><li><a href="https://amzn.to/3cnaHXw" target="_blank" rel="noopener">ゼルダの伝説 風のタクト HD - Wii U</a></li></ul><p>あつもりはハマるのがわかっているので敢えて手を出さなかった。相方氏がやっているのを横でみる他、YouTube 実況を楽しんでいる。</p><h2 id="これから"><a href="#これから" class="headerlink" title="これから"></a>これから</h2><p>こんな感じで約 3 ヶ月、体感はもっと長く LFH しているように感じている。週 5 日間通勤する生活には戻れる自信がない。</p><p>元来インドア派で引きこもるのは得意なはずだったが、実際ここまで強制的に閉じ込められると精神的にまいってしまうことがわかった。適度な気晴らしと自制が求められる。</p><p>相方氏と一緒に住み始めて 2 年半経つがここまで密に一緒に過ごせるのは中々ない機会だと思う。自分と相方氏の実家に頻繁にビデオ電話するようになり、家族とリモート呑みをしたのも新鮮だった。色々不自由はあるけど貴重な時間なのでエンジョイしていこうと思う。</p><script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;COVID-19 の影響で 2 月末から家中心の生活になった。仕事や個人プロジェクトでも約 3 ヶ月間一度も物理出社はしていない。色々変化があったので振り返る。&lt;/p&gt;
&lt;h2 id=&quot;仕事&quot;&gt;&lt;a href=&quot;#仕事&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
      <category term="WFH" scheme="https://blog.tanaka.world/tags/WFH/"/>
    
  </entry>
  
  <entry>
    <title>2019年の振り返り</title>
    <link href="https://blog.tanaka.world/2019/"/>
    <id>https://blog.tanaka.world/2019/</id>
    <published>2019-12-27T11:00:00.000Z</published>
    <updated>2020-12-26T04:10:04.355Z</updated>
    
    <content type="html"><![CDATA[<p>今年は結婚式や会社のサービス立ち上げ、副業・個人サービス開発などなど、<a href="2018">2018</a> 年以上に激動してました。</p><h2 id="結婚式"><a href="#結婚式" class="headerlink" title="結婚式"></a>結婚式</h2><p>10/6 (日)にアメリカ 🇺🇸 シアトルで結婚式を挙げました。相方氏、家族、友人には本当に感謝してます。手前味噌ながら、皆の満足度も高くてとてもよかったです。</p><p>その中でも特によかったのは、家族旅行ができたこと。式の翌日から 3 泊 4 日、AirBnB で借りた一軒家で一緒に生活しました。普段は地理的に離れているため、両家の家族が一つの場所に集まるいい機会となりました。自分の家族とも初の海外旅行で感慨深い。</p><p>慣れないことで色々と大変でした。一緒に取り組んでくれた相方、式当日を企画・進行してくれた友人にも本当に感謝です。</p><p><img src="salish-lodge.jpg" alt="Seattle Snoqualmie Fall (式を挙げた場所)" title="Seattle Snoqualmie Fall (式を挙げた場所)"></p><figcaption style="text-align: center">Seattle Snoqualmie Fall (式を挙げた場所)</figcaption><ul><li>式場とのやりとり<ul><li>代理店とか使わず、現地の人と直接メールでやりとりした</li><li>直接の打ち合わせは 5 月の下見時と 10 月式の前日のみ、電話会議は一度もしていない</li><li>アメリカではメールプッシュしないと返信くれないのが普通と聞いていたのは本当だった（笑）決めるべきことをしつこく確認した</li></ul></li><li>小切手<ul><li>合計 2 回発行した（みずほ銀行）</li><li>式代金の決済システムがアメリカ住所のクレカしか許可されなかった。AVS（Address Verification Service）によるによる制約。</li><li>海外送金は扱っていないとのことで、やむなく小切手を発行＆郵送することになった</li></ul></li><li>航空券<ul><li>主に Delta で家族分も予約。</li><li>Delta は搭乗するときに、決済したのクレカ（物理）が必要になるので注意。自分で決済した場合は、一緒に同行する必要がある。</li></ul></li><li>宿<ul><li><a href="http://airbnb.com/" target="_blank" rel="noopener">AirBnB</a> (2箇所、合計10泊分)</li><li><a href="https://www.vrbo.com/" target="_blank" rel="noopener">Vrbo</a> (1箇所、合計2泊分)</li><li><a href="https://www.expedia.com/" target="_blank" rel="noopener">Expedia</a> (5箇所、合計4泊分)</li><li>自分たち＋家族＋友人の宿泊場所を手配した。大人数で一度に宿泊できるところを探していたら候補が限られてしまった。AirBnB にはないが Vrvo にはある物件があり助かった。</li><li>式の前日・当日は友人と大きな家を借りてワイワイして、翌日からは家族と過ごした<br><img src="airbnb-snoqalmie.jpg" alt="前日の宿泊場所・2次会もここでやった (Airbnb)" title="前日の宿泊場所・2次会もここでやった (Airbnb)"><figcaption style="text-align: center">前日の宿泊場所・2次会もここでやった (Airbnb)</figcaption></li></ul></li><li>荷物<ul><li>結婚式の荷物（ドレス＋スーツ含む）といつもの旅行グッツ合わせて、スーツケース 2 つだけにまとまった</li><li>我ながらここまでコンパクトにまとまったのすごい</li></ul></li><li>移動<ul><li>家族でまとまってレンタカー移動した（レンタカー x 2台）</li><li>電車も使った。南北に走る電車があり IC カード ORCA も使った </li></ul></li><li>新婚旅行<ul><li>旅の後半に相方と二人でニューヨークへ行った。長くなるので別途まとめたいと思う</li></ul></li></ul><blockquote class="twitter-tweet"><p lang="ja" dir="ltr">今年最大のOKRを達成したので、2019年はもう忘年に入りたい👨‍🚀</p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1181971559805702146?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 9, 2019</a></blockquote><p>去年の 12 月頭に入籍し、12 月末に「シアトルで結婚式どう？」という話が持ち上がりました。元々相方氏が留学していたところで、家族を連れていきたいという話もしていたのと、日本での結婚式の是非についてお互いの価値観は一致していたこともあり、初動が速かったです。夫婦初の大規模共同プロジェクト、改めてお疲れさまでした👏 いつかシアトルに移住したい。</p><h2 id="英語"><a href="#英語" class="headerlink" title="英語"></a>英語</h2><ul><li>DMM 英会話<ul><li>1/1 からの半年は文字通り毎日やった</li><li>その後は海外に滞在しているとき、激しく体調が悪いとき、以外はほぼ毎日続けている。</li></ul></li><li>English Chat Lunch<ul><li>週 1 回 English Speaker とランチに行ける会社の制度</li><li>English Speaker : 日本人 = 1 : 3 が 1 グループで毎月入れ替わる</li><li>業務の関係で来れなくなる人もいて、半分くらいの回は、飛び入り参加の English Speaker に囲まれる形となった</li><li>今年は同じチームに English Speaker がいなかった自分にとっては、とてもためになった</li></ul></li><li><a href="https://amzn.to/2ZrSjHb" target="_blank" rel="noopener">英語耳</a>  <ul><li>改めて最初からやり直した。発音できる音は聞き取れる</li><li>発音おかしいなと感じるときなど、時々復習してる</li></ul></li></ul><p>英会話は毎日やることをマイルストーンにしていたのでほぼ達成したが、ただ話すだけのやりっぱなしに課題を感じた。今後は、予習・復習を意識して取り組む。</p><h2 id="買ってよかったもの"><a href="#買ってよかったもの" class="headerlink" title="買ってよかったもの"></a>買ってよかったもの</h2><ul><li><a href="/the-best-things-2019">2019年買ってよかったもの</a></li></ul><h2 id="断捨離"><a href="#断捨離" class="headerlink" title="断捨離"></a>断捨離</h2><ul><li><a href="/minimalism-in-2019">2019年断捨離したもの</a></li></ul><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><ul><li>1月: 愛知</li><li>2月: 福岡（出張）</li><li>5月: シアトル</li><li>7月: 米子（帰省）</li><li>10月: シアトル・ニューヨーク</li><li>12月: 大阪・京都</li></ul><p>年に 1回は海外に行きたい（願望）。</p><h2 id="登壇・ブログ"><a href="#登壇・ブログ" class="headerlink" title="登壇・ブログ"></a>登壇・ブログ</h2><p>何度か社内外の勉強会に登壇する機会を頂いた。会社でやっていることは <a href="https://qiita.com/advent-calendar/2019/merpay" target="_blank" rel="noopener">Merpay Advent Calendar 2019</a> にて<a href="https://tech.mercari.com/entry/2019/12/12/202128" target="_blank" rel="noopener">公開</a> し、いい振り返りの機会となった。</p><ul><li><a href="https://speakerdeck.com/tanakaworld/replace-wicked-pdf-with-puppeteer" target="_blank" rel="noopener">Replace wicked_pdf with puppeteer</a></li><li><a href="https://speakerdeck.com/tanakaworld/automatic-code-generation-for-spa" target="_blank" rel="noopener">Automatic Code Generation for SPA</a></li><li><a href="https://speakerdeck.com/tanakaworld/split-a-nuxt-microservice-to-3-microservices" target="_blank" rel="noopener">Nuxt マイクロサービスを 3つに分割した話</a></li><li><a href="https://tech.mercari.com/entry/2019/12/12/202128" target="_blank" rel="noopener">メルペイの社内向け管理画面を振り返る</a></li></ul><h2 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h2><p>今年は Nuxt, OpenAPITools, CKEditor 周りをよく使っていた。ソースコード読んだり Issue 上げたりしていた。自分の OSS としてちゃんと公開したものはなかった。</p><p><a href="https://github.com/denoland" target="_blank" rel="noopener">deno</a> の公式にピクセルロゴを掲載してもらえたのは純粋に嬉しかった。キッカケをくれた <a href="https://twitter.com/__syumai" target="_blank" rel="noopener">@__syumai</a> や deno コミュニティの方々に感謝。</p><ul><li>docs: add a pixelated animation logo to website manual <a href="https://github.com/denoland/deno/pull/2110" target="_blank" rel="noopener">#2110</a><br>  <img src="deno.gif" alt="deno.gif" title="deno.gif">  <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">deno-ja の slack や <a href="https://twitter.com/__syumai?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@__syumai</a> の後押しもあり、気づいたら取り込んでもらえる運びになっててコミュニティの寛容さを感じました⚡️👾 / Deno にコントリビュートする (2) <a href="https://t.co/tjIl7T0pJs" target="_blank" rel="noopener">https://t.co/tjIl7T0pJs</a> <a href="https://twitter.com/hashtag/Qiita?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#Qiita</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1203863124681449473?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">December 9, 2019</a></blockquote></li><li><a href="https://github.com/OpenAPITools/openapi-generator-cli/issues/11" target="_blank" rel="noopener">https://github.com/OpenAPITools/openapi-generator-cli/issues/11</a></li><li><a href="https://github.com/nuxt/nuxt.js/issues/6261" target="_blank" rel="noopener">https://github.com/nuxt/nuxt.js/issues/6261</a></li><li><a href="https://github.com/nuxt/nuxt.js/issues/5136" target="_blank" rel="noopener">https://github.com/nuxt/nuxt.js/issues/5136</a></li></ul><h2 id="Proff"><a href="#Proff" class="headerlink" title="Proff"></a>Proff</h2><p><a href="https://proff.io/" target="_blank" rel="noopener">プロフ (Proff) スマート履歴書</a></p><p><strong>目標の振り返り</strong></p><ul><li>編集画面の SPA 移行<ul><li>既存機能の約 50　のエンドポイント を API 化し、約 20 ページを SPA 化した</li><li>TypeScript + Vue, OpenAPI によるコード自動生成な構成になった</li><li>詳細は <a href="https://speakerdeck.com/tanakaworld/automatic-code-generation-for-spa" target="_blank" rel="noopener">Automatic Code Generation for SPA</a> で話した</li><li>残りはプレビュー画面と公開画面（後述）</li></ul></li><li>紙データの自動読み込み<ul><li>全く手を付けられなかった</li></ul></li></ul><p><strong>2020 年に向けて</strong></p><ul><li><p>ユーザー数 x 4</p><ul><li>今年はほぼ毎日ユーザー登録はあるものの飛躍的には伸びていない</li><li>4 倍くらいには伸ばしたい</li></ul></li><li><p>パフォーマンス改善</p><ul><li>当たり前のことができていない</li><li>まずはスリム化、無駄なリソース読み込みを減らす (JS, CSS)</li></ul></li><li><p>プレビュー画面と公開画面の SPA + SSR 実現</p><ul><li>編集しながらリアルタイムプレビューとかしたい</li><li>Rails でレンダリングしているころの名残で CSS がカオス、解消したい</li></ul></li><li><p>スケーラブルなアプリケーション設計＋インフラ構成</p><ul><li>アクセス過多になったときにスケールできない箇所を解消したい（DB設計、MySQL クエリ周り）</li><li>履歴書の公開ページは都度サーバで動的生成しているがキャッシュするなどしたい</li></ul><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年は結婚式や会社のサービス立ち上げ、副業・個人サービス開発などなど、&lt;a href=&quot;2018&quot;&gt;2018&lt;/a&gt; 年以上に激動してました。&lt;/p&gt;
&lt;h2 id=&quot;結婚式&quot;&gt;&lt;a href=&quot;#結婚式&quot; class=&quot;headerlink&quot; title=&quot;結婚式&quot;&gt;&lt;/
      
    
    </summary>
    
    
    
      <category term="year-review" scheme="https://blog.tanaka.world/tags/year-review/"/>
    
  </entry>
  
  <entry>
    <title>2019年買ってよかったもの</title>
    <link href="https://blog.tanaka.world/the-best-things-2019/"/>
    <id>https://blog.tanaka.world/the-best-things-2019/</id>
    <published>2019-12-25T03:00:00.000Z</published>
    <updated>2020-12-26T04:10:04.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AirPods-Pro"><a href="#AirPods-Pro" class="headerlink" title="AirPods Pro"></a><a href="https://amzn.to/37fOreW" target="_blank" rel="noopener">AirPods Pro</a></h2><ul><li><a href="https://amzn.to/2Zr31hj" target="_blank" rel="noopener">ソニー SONY ワイヤレスノイズキャンセリングヘッドホン WH-1000XM3</a> を使っていたが、長時間着用していると頭が痛くなるのに悩まされていた</li><li>音質にこだわりなくノイキャンを手軽にしたい自分にとってはとてもよかった</li></ul><h2 id="IKEUCHI-ORGANIC-オーガニックタオルハンカチ"><a href="#IKEUCHI-ORGANIC-オーガニックタオルハンカチ" class="headerlink" title="IKEUCHI ORGANIC オーガニックタオルハンカチ"></a><a href="https://www.ikeuchi.org/c/fashion/gr23/gd93" target="_blank" rel="noopener">IKEUCHI ORGANIC オーガニックタオルハンカチ</a></h2><ul><li>性能が最高、歴代のハンカチの中でこれに勝るものはなかった</li><li>速乾性、吸水性、肌さわりすべてに置いて最高</li></ul><h2 id="ブラーバ-ジェット-240"><a href="#ブラーバ-ジェット-240" class="headerlink" title="ブラーバ ジェット 240"></a><a href="https://amzn.to/2QoNWbN" target="_blank" rel="noopener">ブラーバ ジェット 240</a></h2><ul><li>友人から結婚のお祝いで頂いた。コンパクトで小回りが効くところも気に入っている</li><li>クイックルワイパーでやればいい派閥だったけど、手が届きづらいところもブラーバが掃除してくれる</li></ul><h2 id="髪の毛くるくるポイ"><a href="#髪の毛くるくるポイ" class="headerlink" title="髪の毛くるくるポイ"></a><a href="https://amzn.to/37e3xlj" target="_blank" rel="noopener">髪の毛くるくるポイ</a></h2><ul><li>同僚のススメで、半信半疑ながら試してみた</li><li>もっと早く購入しておけばよかったと思った商品。髪の毛が絡まる問題は一切なくなった</li></ul><h2 id="山崎実業-バナナスタンド"><a href="#山崎実業-バナナスタンド" class="headerlink" title="山崎実業 バナナスタンド"></a><a href="https://amzn.to/2snXYSB" target="_blank" rel="noopener">山崎実業 バナナスタンド</a></h2><ul><li>ほぼ毎朝バナナ食べている身としては革新だった</li><li>“バナナスタンドに吊るす” + “茎部分をラップで包む” をするだけでバナナの持ちが全然違う </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;AirPods-Pro&quot;&gt;&lt;a href=&quot;#AirPods-Pro&quot; class=&quot;headerlink&quot; title=&quot;AirPods Pro&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://amzn.to/37fOreW&quot; target=&quot;_blank&quot; rel
      
    
    </summary>
    
    
    
      <category term="the-best-things" scheme="https://blog.tanaka.world/tags/the-best-things/"/>
    
  </entry>
  
  <entry>
    <title>2019年断捨離したもの</title>
    <link href="https://blog.tanaka.world/minimalism-in-2019/"/>
    <id>https://blog.tanaka.world/minimalism-in-2019/</id>
    <published>2019-12-22T05:00:00.000Z</published>
    <updated>2020-12-25T03:35:42.868Z</updated>
    
    <content type="html"><![CDATA[<p>数年間 <a href="/methods-to-be-minimalism">1年使わなかったものは全て断捨離する</a> というのを実践している。<br>大したライフハックではないが、意識しないとモノを溜めてしまう自分にとってはルール化するくらいが丁度いいと思っている。</p><p>しかし例外として家電類が捨てきれずにいた。もったいなく感じる、メインデバイスが壊れたときのサブとして使うかもしれない、などと捨てるのに心理的障壁が大きかった。ようやく今年は断捨離することができた。</p><p>雑に振り返ってみる。</p><h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><h3 id="🍎-Apple-製品"><a href="#🍎-Apple-製品" class="headerlink" title="🍎 Apple 製品"></a>🍎 Apple 製品</h3><p><img src="mac-ipod-iphone.jpg" alt="mac-ipod-iphone.jpg" title="mac-ipod-iphone.jpg"></p><p>なかなか捨てられずにいたものの一つに Apple 製品が挙げられる。</p><p>正常動作するかどうか自信がなくトラブルになるのも面倒だったので、これらはじゃんぱらで売却した。かなりいい値段がつき、もう少し早く出しておけばよかったと思った。これらの他に iPhone 6 Plus は親に贈呈し、iPhone 7 Plus は風呂用デバイス兼目覚まし時計として使っている。</p><h4 id="💻-Mac-Book-Pro-15inch"><a href="#💻-Mac-Book-Pro-15inch" class="headerlink" title="💻 Mac Book Pro 15inch"></a>💻 Mac Book Pro 15inch</h4><p>上京して初めて購入した Mac で思い入れがあった。Final Cut Pro で動画制作や Flash でゲーム作ったりしていた。この Mac がキッカケで出会った人もいて色々とエモい。</p><p>重量が重く持ち運びに難があり、自宅用 Laptop として使っていた。TV につないでストリーミングや音楽再生機として使っていた他、Ubuntu を入れて遊んだり、CD ドライブでデータ取り込みとかに使っていた。Apple TV を購入してからその役目はなくなり文鎮化していた。</p><h4 id="💻-Mac-Book-Air"><a href="#💻-Mac-Book-Air" class="headerlink" title="💻 Mac Book Air"></a>💻 Mac Book Air</h4><p>前職まで会社用 Mac というものがなく、自分の Mac で仕事していた。修理に出したり何かあったときのサブマシンとして Mac Book Air を使っていた。<br>実際4,5回はバックアップを復元して使っていた。</p><p>この Air は購入した直後、友人とカフェで作業しているとき麦茶を浴びてしまい、お亡くなりになりかけた思い出がある。Apple Store に持っていったら水没扱いとなっていた。<br>水分を拭き取ってもらうと一応正常に動作したので、修理には出さずに使い続けていた。</p><h4 id="🎧-iPod-第-3-世代"><a href="#🎧-iPod-第-3-世代" class="headerlink" title="🎧 iPod (第 3 世代)"></a>🎧 iPod (第 3 世代)</h4><p>初めて購入した iPod。最近もランニング用として使っていた。</p><h4 id="🎧-iPod-Nano（第-4-世代）"><a href="#🎧-iPod-Nano（第-4-世代）" class="headerlink" title="🎧 iPod Nano（第 4 世代）"></a>🎧 iPod Nano（第 4 世代）</h4><p>動画が撮影できるようになった初めての iPod。動画は数十種類のエフェクトがつけられるようになっていて、色々遊んだ。<br>見返すと色々な動画が撮影されており、エモかった。</p><h4 id="📱-iPhone-4"><a href="#📱-iPhone-4" class="headerlink" title="📱 iPhone 4"></a>📱 iPhone 4</h4><p>iPhone シリーズの中で初めて購入した。Softbank が学生向けに斡旋していてそれを経由して購入した。<br>元々 Docomo ユーザーだったのだが当時は Softbank でしか iPhone が発売されておらず致し方なかった。隣の学部は iPhone 3G が無料配布されていて、とても羨ましく思っていたのを思い出した。<br>購入依頼、Softbank 契約していたが、Sim Free にしたくて解約し、今は LINE Mobile を契約している。</p><h4 id="📱-iPhone-5"><a href="#📱-iPhone-5" class="headerlink" title="📱 iPhone 5"></a>📱 iPhone 5</h4><p>裏面が割れている iPhone。渋谷の道玄坂を歩いているときに手を滑らせ約 2 メートルほど地面を滑走した。シリコンケースに入れていたのだが摩擦でケースから飛び出し意味はなかった。<br>この事件以来、iPhone ケースは Apple 純正を使うようにしている。</p><h4 id="⌨️-Apple-Magic-Trackpad"><a href="#⌨️-Apple-Magic-Trackpad" class="headerlink" title="⌨️ Apple Magic Trackpad"></a>⌨️ Apple Magic Trackpad</h4><p>電池式のやつで交換が手間だった。反応も悪くなったので新しいやつを購入した。</p><h4 id="⌨️-Apple-Magic-Keyboard"><a href="#⌨️-Apple-Magic-Keyboard" class="headerlink" title="⌨️  Apple Magic Keyboard"></a>⌨️  Apple Magic Keyboard</h4><p>電池式のやつ。同上。</p><h4 id="🔌-その他付属品"><a href="#🔌-その他付属品" class="headerlink" title="🔌 その他付属品"></a>🔌 その他付属品</h4><ul><li>Apple EarPods with Lightning Connector</li><li>Apple EarPods with 3.5 mm Headphone Plug</li></ul><p>地味に溜まっていく付属品もじゃんぱらした。充電用の Lightning ケーブル以外はすべて使ってなかった。</p><h3 id="📞-ガラケー"><a href="#📞-ガラケー" class="headerlink" title="📞 ガラケー"></a>📞 ガラケー</h3><p><img src="flip-phone.jpg" alt="flip-phone.jpg" title="flip-phone.jpg"></p><p>高校生のころから数えるとガラケーは3台使ったことがある。その内の２つはなんとなく捨てられないでいた。<br>いつの日か電源ケーブルがなくなってから電源すらいれず、触ってガラケーの感触を確かめるくらいにしかつかっていなかった。<br>メールの本文にテキストを入れると通信容量を食うので、件名だけでやりとりしていたことや、mixi 時代を思い出した。</p><h3 id="⚡️-PC-パーツ"><a href="#⚡️-PC-パーツ" class="headerlink" title="⚡️ PC パーツ"></a>⚡️ PC パーツ</h3><ul><li>メモリ 8GB x 2</li><li>Mac Book Pro 用交換バッテリー</li></ul><p>Mac Book Pro を改造するのに使っていた余り分品。当分改造や自作 PC しないのでメルカリした。</p><h3 id="💡Amazon-Echo-Dot-第2世代、2017年モデル"><a href="#💡Amazon-Echo-Dot-第2世代、2017年モデル" class="headerlink" title="💡Amazon Echo Dot (第2世代、2017年モデル)"></a>💡Amazon Echo Dot (第2世代、2017年モデル)</h3><p>使ってなかった。じゃんぱらした。</p><h3 id="📺-テレビ（東芝-REGZA-32インチ-液晶テレビ）"><a href="#📺-テレビ（東芝-REGZA-32インチ-液晶テレビ）" class="headerlink" title="📺 テレビ（東芝 REGZA 32インチ 液晶テレビ）"></a>📺 テレビ（東芝 REGZA 32インチ 液晶テレビ）</h3><p>学生のころに購入して10年ほど使っていた。特に不具合や不満もなかったが、最近は観たいテレビ番組もなくただのディスプレイと化していた。<br>強いていうなら目覚まし代わりに使っていたくらい。テレビのオンタイマーを音量 70 くらいでセットしておいて爆音で無理やり目を覚ますという使い方をしていた。<br>相方氏と同居しはじめてから爆音はやめた。</p><p>ヤマダ電機に持ち込んで、<strong>リサイクル券を発行して</strong>廃棄した。運搬はタクシーを使用した。<br>ジャパンタクシーの「JPN TAXI」の後部座席に難なく入れられた。</p><h2 id="🧾-NHK"><a href="#🧾-NHK" class="headerlink" title="🧾 NHK"></a>🧾 NHK</h2><p>NHK 解約もテレビを捨てた理由の一つだった。<br>今のマンションに引っ越してから衛星アンテナがついているから衛星契約もさせられていた。約2年全く観ないのに垂れ流していたお金は実にもったいない。</p><p>NHK 解約は次の手順で完了した。</p><ul><li>NHK 解約窓口へ電話</li><li>理由と解約方法・解約日を聞かれる</li><li>解約書類が届く</li><li>解約書類にリサイクル券のコピーを同封（14日以内に返送する必要あり）</li><li>過払い分は日割り計算で戻される</li></ul><p>「廃棄の証明」というのが重要で、リサイクル券をもらうのが一番手軽そうだった。<br>国から認可を受けた廃棄をしているところであれば、有料でリサイクル券を発行してくれる。<br>よくある無料廃棄業者とかはリサイクル券発行してくれないので注意。</p><h3 id="📀-ハードディスク"><a href="#📀-ハードディスク" class="headerlink" title="📀 ハードディスク"></a>📀 ハードディスク</h3><p>デジカメ写真や過去の書類、Mac のバックアップディスクとして使っていた HDD が何個かあった。<br>すべて Google Photos や Dropbox にバックアップした。</p><p>HDD はヨドバシカメラが無料で廃棄してくれた。</p><h3 id="👕-衣類・バッグ"><a href="#👕-衣類・バッグ" class="headerlink" title="👕 衣類・バッグ"></a>👕 衣類・バッグ</h3><p>服は他の人が着てくれそうなものはメルカリし、そうでないものは <a href="http://bring.org/index_collection.html" target="_blank" rel="noopener">FUKU-FUKU プロジェクト</a>に回した。<br>バッグ類はメルカリした。</p><h3 id="🎮-Nintendo-3DS-ソフト"><a href="#🎮-Nintendo-3DS-ソフト" class="headerlink" title="🎮 Nintendo 3DS + ソフト"></a>🎮 Nintendo 3DS + ソフト</h3><p>本体がなければソフトも使わないので一緒にメルカリした。</p><h3 id="🧴-化粧品・ギフトグッツ"><a href="#🧴-化粧品・ギフトグッツ" class="headerlink" title="🧴 化粧品・ギフトグッツ"></a>🧴 化粧品・ギフトグッツ</h3><p>もらったけど一度も使っていない化粧品（相方氏の）やギフト類をメルカリした。<br>化粧品は出品してすぐ売れるので驚いた。</p><h2 id="🔋-使用済み乾電池"><a href="#🔋-使用済み乾電池" class="headerlink" title="🔋 使用済み乾電池"></a>🔋 使用済み乾電池</h2><p>ヨドバシカメラが無料で受け取ってくれた。<br>ヤマダ電機やソフマップ、じゃんぱらなどは受け取りしてくれなかった。</p><h2 id="📲-LINEアカウント"><a href="#📲-LINEアカウント" class="headerlink" title="📲 LINEアカウント"></a>📲 LINEアカウント</h2><p>企業アカウントとかで通知きたけど内容は見ずに、スワイプして削除する習慣はないだろうか。<br>友人からくるメッセージ以外はすべてその状態になっていて、毎日使うアプリなので地味に手間を感じていた。</p><ul><li>メッセージ詳細を開く</li><li>アカウント設定（右上ハンバーガー）</li><li>「ブロック」</li><li>一覧で「削除」</li></ul><p>これで通知来なくなる。</p><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><p>まとめると次の手段で断捨離を進めた。</p><ul><li>メルカリ</li><li>じゃんぱら</li><li>ヨドバシカメラ</li><li><a href="http://bring.org/index_collection.html" target="_blank" rel="noopener">FUKU-FUKU プロジェクト</a></li></ul><h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><h2 id="断捨離して困ったこと"><a href="#断捨離して困ったこと" class="headerlink" title="断捨離して困ったこと"></a>断捨離して困ったこと</h2><p>特になし。</p><p>強いて言うなら洗濯サイクルが滞ってるときに、着る服がなくて困るくらい。</p><p>ここに記載しなかったものも含め、日々意識して捨てたりリサイクルしているが、気を抜くとそれでもモノは増えていく。<br>断捨離できないのは「モノを捨てられない」のではなく「思い出が捨てられない」のだとつくづく思い知らされる。</p><h2 id="断捨離®"><a href="#断捨離®" class="headerlink" title="断捨離®"></a>断捨離®</h2><p>※「断捨離®」は、やましたひでこさんの<a href="https://www.j-platpat.inpit.go.jp/c1800/TR/JP-2003-099799/84452EA8CE1A886ECFA54F4C88A52B98FA4233C94FEC19A6CD11534C783BAE59/40/ja" target="_blank" rel="noopener">登録商標</a>らしい。<br>知らなかった。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;数年間 &lt;a href=&quot;/methods-to-be-minimalism&quot;&gt;1年使わなかったものは全て断捨離する&lt;/a&gt; というのを実践している。&lt;br&gt;大したライフハックではないが、意識しないとモノを溜めてしまう自分にとってはルール化するくらいが丁度いいと思っている。
      
    
    </summary>
    
    
    
      <category term="minimalist" scheme="https://blog.tanaka.world/tags/minimalist/"/>
    
  </entry>
  
  <entry>
    <title>Nuxt マイクロサービスを 3つに分割した話</title>
    <link href="https://blog.tanaka.world/split-a-nuxt-microservice-to-3-microservices/"/>
    <id>https://blog.tanaka.world/split-a-nuxt-microservice-to-3-microservices/</id>
    <published>2019-08-26T14:00:00.000Z</published>
    <updated>2020-12-25T03:35:42.868Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nuxt-meetup.connpass.com/event/135514" target="_blank" rel="noopener">NuxtMeetUp#9 オールスターズ</a> #nuxtmeetup にてマイクロサービスを分割したプロジェクトについてプレゼンした．<br>先に Vue コンポーネントを共通化してから，リポジトリや配信環境環境を分割した‥<br>共通化に関しては一緒に分割を担当したメンバーが<a href="https://tech.mercari.com/entry/2019/08/26/120000" target="_blank" rel="noopener">1つのアプリケーションを分割するためのコンポーネント管理方法</a>にまとめてくれている．</p><script async class="speakerdeck-embed" data-id="9f312006ffce4b0ab3aa4dc3475fcdb2" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script><p>今回の Meetup はメルペイとして会場スポンサーすることになった．300人枠とやや挑戦的な設定をしてメルペイの仲介役として受け入れを担当した．<br>初めてのことばかりで色々と大変だったが，協力してくれたメルペイメンバーにはとても感謝している．</p><p>スポンサートークとして <a href="https://twitter.com/_sskyu" target="_blank" rel="noopener">@_ssky</a> がメルペイフロントエンドの開発についてプレゼンを担当してくれた．</p><script async class="speakerdeck-embed" data-id="d78f25a54499488aacfdcde256148098" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://nuxt-meetup.connpass.com/event/135514&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;NuxtMeetUp#9 オールスターズ&lt;/a&gt; #nuxtmeetup にてマイクロサービスを分割
      
    
    </summary>
    
    
    
      <category term="presentation" scheme="https://blog.tanaka.world/tags/presentation/"/>
    
      <category term="microservices" scheme="https://blog.tanaka.world/tags/microservices/"/>
    
      <category term="nuxt" scheme="https://blog.tanaka.world/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>Automatic Code Generation for SPA</title>
    <link href="https://blog.tanaka.world/automatic-code-generation-for-spa/"/>
    <id>https://blog.tanaka.world/automatic-code-generation-for-spa/</id>
    <published>2019-07-03T14:00:00.000Z</published>
    <updated>2020-12-25T03:35:42.868Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mercari.connpass.com/event/134185/" target="_blank" rel="noopener">Mercari x Merpay Frontend Tech Talk vol.2</a> にて，コード生成の自動化についてプレゼンした．</p><p>メルペイでのコード生成や，<a href="https://proff.io/" target="_blank" rel="noopener">Proff.io</a> で実際に組み込んだコード生成について話した．</p><script async class="speakerdeck-embed" data-id="9c2349da4ed3487ca286728767cddad3" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mercari.connpass.com/event/134185/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mercari x Merpay Frontend Tech Talk vol.2&lt;/a&gt; にて，コード生
      
    
    </summary>
    
    
    
      <category term="presentation" scheme="https://blog.tanaka.world/tags/presentation/"/>
    
      <category term="swagger" scheme="https://blog.tanaka.world/tags/swagger/"/>
    
      <category term="fastjson-api" scheme="https://blog.tanaka.world/tags/fastjson-api/"/>
    
      <category term="proff.io" scheme="https://blog.tanaka.world/tags/proff-io/"/>
    
  </entry>
  
  <entry>
    <title>Rails で swagger-blocks と fastjson_api を組み合わせる (API定義編)</title>
    <link href="https://blog.tanaka.world/swagger-blocks-with-fastjson-api-part1/"/>
    <id>https://blog.tanaka.world/swagger-blocks-with-fastjson-api-part1/</id>
    <published>2019-04-21T02:48:00.000Z</published>
    <updated>2020-12-25T03:35:42.866Z</updated>
    
    <content type="html"><![CDATA[<p>Rails プロジェクトで クライアント向けの APIClient を自動生成するときの構成を試してみた．<br>Swagger で記述した API 定義からコード生成する例はちらほら見かけるが，Netflix 製の <a href="https://github.com/Netflix/fast_jsonapi" target="_blank" rel="noopener">fast_jsonapi</a> を使った記事は見かけなかったので，まとめておく．</p><p>完成版のソースコードはこちら 👉 <a href="https://github.com/tanakaworld/swagger-blocks-fastjson-api" target="_blank" rel="noopener">tanakaworld/swagger-blocks-fastjson-api</a></p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR;"></a>TL;DR;</h2><p><strong>Part1: API定義編 (本記事)</strong></p><ul><li>Backend は Rails で API を実装</li><li>JSON シリアライザとして，Netflix 製の <a href="https://github.com/Netflix/fast_jsonapi" target="_blank" rel="noopener">fastjson_api</a></li><li>API 定義は <a href="https://github.com/fotinakis/swagger-blocks" target="_blank" rel="noopener">swagger-blocks</a> を使用</li></ul><p>Part2: コード生成編 (作成中)</p><ul><li><a href="https://github.com/OpenAPITools/openapi-generator" target="_blank" rel="noopener">openapi-generator</a> で TypeScript の APIClient を自動生成</li></ul><p>Part3: 自動テスト編 (作成中)</p><ul><li>RSpec で Reqeuests 自動テスト</li><li><a href="https://github.com/willnet/committee-rails" target="_blank" rel="noopener">committee-rails</a> で Swagger 定義との整合性チェック</li></ul><h2 id="Scaffold-Books"><a href="#Scaffold-Books" class="headerlink" title="Scaffold Books"></a>Scaffold Books</h2><p>書籍情報の CRUD を題材に考える．<br>Rails 6.0.0.beta3 を使った．</p><p>scaffold で Books を生成し，画像アップロードは <a href="https://edgeguides.rubyonrails.org/active_storage_overview.html" target="_blank" rel="noopener">Active Storage</a> を使う．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bundle <span class="built_in">exec</span> rails g scaffold books title:string description:text</span><br><span class="line">$ bundle <span class="built_in">exec</span> rails db:migrate</span><br></pre></td></tr></table></figure><p>Active Storage を有効化し，Model / View / Controller で <code>image</code> の記述を追加する．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bundle <span class="built_in">exec</span> rails active_storage:install</span><br><span class="line">$ bundle <span class="built_in">exec</span> rails db:migrate</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/book.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span> &lt; ApplicationRecord</span></span><br><span class="line">  has_one_attached <span class="symbol">:image</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="scaffold_books_list.png" alt="scaffold_books_list" title="scaffold_books_list.png"></p><h2 id="Serializer"><a href="#Serializer" class="headerlink" title="Serializer"></a>Serializer</h2><p>Books 向けとエラーハンドリング用の Serializer を用意する．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Gemfile</span></span><br><span class="line">gem <span class="string">'fast_jsonapi'</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ bundle <span class="built_in">exec</span> rails g serializer books</span><br><span class="line">$ bundle <span class="built_in">exec</span> rails g serializer error</span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/serializers/book_serializer.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookSerializer</span></span></span><br><span class="line">  <span class="keyword">include</span> FastJsonapi::ObjectSerializer</span><br><span class="line">  attributes <span class="symbol">:id</span>,</span><br><span class="line">             <span class="symbol">:title</span>,</span><br><span class="line">             <span class="symbol">:description</span>,</span><br><span class="line">             <span class="symbol">:created_at</span>,</span><br><span class="line">             <span class="symbol">:updated_at</span></span><br><span class="line"></span><br><span class="line">  attribute <span class="symbol">:image_url</span> <span class="keyword">do</span> <span class="params">|object|</span></span><br><span class="line">    Rails.application.routes.url_helpers.rails_blob_url(object.image) <span class="keyword">if</span> object.image.attached?</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># app/serializers/error_serializer.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ErrorSerializer</span></span></span><br><span class="line">  <span class="keyword">include</span> FastJsonapi::ObjectSerializer</span><br><span class="line">  attributes <span class="symbol">:errors</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="API-実装"><a href="#API-実装" class="headerlink" title="API 実装"></a>API 実装</h2><p><code>app/controllers/api/books_controller.rb</code> を実装する．<code>app/controllers/books_controller.rb</code> とほぼ同じだが，APIレスポンス箇所で Serializer を使う．</p><blockquote><p>render json: BookSerializer.new(@books).serialized_json</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api::BooksController</span> &lt; ApplicationController</span></span><br><span class="line">  before_action <span class="symbol">:set_book</span>, <span class="symbol">only:</span> [<span class="symbol">:show</span>, <span class="symbol">:update</span>, <span class="symbol">:destroy</span>]</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    @books = Book.all</span><br><span class="line">    render <span class="symbol">json:</span> BookSerializer.new(@books).serialized_json</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span></span><br><span class="line">    render <span class="symbol">json:</span> BookSerializer.new(@book).serialized_json</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">create</span></span></span><br><span class="line">    @book = Book.new(book_params)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> @book.save</span><br><span class="line">      render <span class="symbol">json:</span> BookSerializer.new(@book).serialized_json, <span class="symbol">status:</span> <span class="symbol">:created</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="symbol">json:</span> ErrorSerializer.new(@book).serialized_json, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">update</span></span></span><br><span class="line">    <span class="keyword">if</span> @book.update(book_params)</span><br><span class="line">      render <span class="symbol">json:</span> BookSerializer.new(@book).serialized_json, <span class="symbol">status:</span> <span class="symbol">:ok</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      render <span class="symbol">json:</span> ErrorSerializer.new(@book).serialized_json, <span class="symbol">status:</span> <span class="symbol">:unprocessable_entity</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">destroy</span></span></span><br><span class="line">    @book.destroy</span><br><span class="line">    render <span class="symbol">json:</span> <span class="literal">nil</span>, <span class="symbol">status:</span> <span class="symbol">:no_content</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  private</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">set_book</span></span></span><br><span class="line">    @book = Book.find(params[<span class="symbol">:id</span>])</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">book_params</span></span></span><br><span class="line">    params.permit(<span class="symbol">:title</span>, <span class="symbol">:description</span>, <span class="symbol">:image</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line">Rails.application.routes.draw <span class="keyword">do</span></span><br><span class="line">  resources <span class="symbol">:books</span></span><br><span class="line"></span><br><span class="line">  namespace <span class="symbol">:api</span>, <span class="symbol">defaults:</span> &#123;<span class="symbol">format:</span> <span class="symbol">:json</span>&#125; <span class="keyword">do</span></span><br><span class="line">    resources <span class="symbol">:books</span>, <span class="symbol">except:</span> [<span class="symbol">:new</span>, <span class="symbol">:edit</span>]</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>/api/books</code> のレスポンスはこうなる．</p><p><img src="api_books_response.png" alt="api_books_response" title="api_books_response.png"></p><h2 id="Swagger-定義のディレクトリ構成"><a href="#Swagger-定義のディレクトリ構成" class="headerlink" title="Swagger 定義のディレクトリ構成"></a>Swagger 定義のディレクトリ構成</h2><p>各 controller 上に swgger 定義を普通に記述してもよいが，一瞬で見通しが悪くなる．<br>Swagger 定義と API 実装の記述箇所を分離するために次の構成にした．<br>（参考：<a href="https://qiita.com/kymmt90/items/439868c21abe077642fa" target="_blank" rel="noopener">Rails + swagger-blocks で OpenAPI 形式の API ドキュメントを作成する</a>）</p><p><img src="swagger_dir.png" alt="swagger_dir.png" title="swagger_dir.png"></p><p>Controller に依存する定義は <code>app/controllers/concerns</code> に配置，<code>swagger_path</code> で API リクエストパスに対応する定義を記述する．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/concerns/books_api.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Swagger::BooksApi</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line">  <span class="keyword">include</span> Swagger::Blocks</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">include</span> Swagger::ErrorSchema</span><br><span class="line"></span><br><span class="line">    swagger_path <span class="string">'/api/books'</span> <span class="keyword">do</span></span><br><span class="line">      <span class="comment"># Index</span></span><br><span class="line">      operation <span class="symbol">:get</span> <span class="keyword">do</span></span><br><span class="line">        key <span class="symbol">:operationId</span>, <span class="string">'getBooks'</span></span><br><span class="line">        key <span class="symbol">:tags</span>, [<span class="string">'sampleApp'</span>]</span><br><span class="line"></span><br><span class="line">        parameter <span class="symbol">name:</span> <span class="symbol">:id</span>,</span><br><span class="line">                  <span class="symbol">in:</span> <span class="symbol">:path</span>,</span><br><span class="line">                  <span class="symbol">required:</span> <span class="literal">true</span>,</span><br><span class="line">                  <span class="symbol">type:</span> <span class="symbol">:integer</span>,</span><br><span class="line">                  <span class="symbol">format:</span> <span class="symbol">:int64</span></span><br><span class="line">        response <span class="number">200</span> <span class="keyword">do</span></span><br><span class="line">          key <span class="symbol">:description</span>, <span class="string">'Books response'</span></span><br><span class="line">          fja_response_schema <span class="symbol">:array</span>, <span class="symbol">:Book</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        extend Swagger::ErrorResponses::NotFoundError</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  </span><br><span class="line">  •••</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Model に依存する定義は <code>app/models/concerns</code> に配置し，主に <code>swagger_schema</code> で resource や request / response の形式を定義する．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/models/concerns/books_schema.rb</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Swagger::BookSchema</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line">  <span class="keyword">include</span> Swagger::Blocks</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    swagger_schema <span class="symbol">:Book</span>,</span><br><span class="line">                   <span class="symbol">required:</span> [<span class="symbol">:title</span>, <span class="symbol">:description</span>, <span class="symbol">:image_url</span>],</span><br><span class="line">                   <span class="symbol">additionalProperties:</span> <span class="literal">false</span> <span class="keyword">do</span></span><br><span class="line">      property <span class="symbol">:id</span>, <span class="symbol">type:</span> <span class="symbol">:integer</span></span><br><span class="line">      property <span class="symbol">:title</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:description</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:image_url</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:created_at</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:updated_at</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># response</span></span><br><span class="line">    fja_swagger_schema <span class="symbol">:Book</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># request</span></span><br><span class="line">    swagger_schema <span class="symbol">:CreateBookRequest</span>, <span class="symbol">additionalProperties:</span> <span class="literal">false</span> <span class="keyword">do</span></span><br><span class="line">      property <span class="symbol">:title</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:description</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:image</span>, <span class="symbol">type:</span> <span class="symbol">:object</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    swagger_schema <span class="symbol">:UpdateBookRequest</span>, <span class="symbol">additionalProperties:</span> <span class="literal">false</span> <span class="keyword">do</span></span><br><span class="line">      property <span class="symbol">:title</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:description</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">      property <span class="symbol">:image</span>, <span class="symbol">type:</span> <span class="symbol">:object</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="fastjson-api-向けの-swagger-blocks-ラッパーを実装"><a href="#fastjson-api-向けの-swagger-blocks-ラッパーを実装" class="headerlink" title="fastjson_api 向けの swagger-blocks ラッパーを実装"></a>fastjson_api 向けの swagger-blocks ラッパーを実装</h2><p>fast_jsonapi は <a href="https://jsonapi.org/format/#document-resource-object-related-resource-links" target="_blank" rel="noopener">jsonapi</a> に準拠している．<br>この形式を各定義に書くのは冗長なので，JSON API 形式準拠したレスポンス形式を記述するラッパー <code>fja_swagger_schema</code> を実装した．<br><code>swagger_schema</code> の定義名とレスポンス形式が <code>object</code> or <code>array</code> を選択できるようにしている．</p><p>前者は Controller 側の記述で使い，後者は Model 側の記述で使う．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/initializers/swagger_blocks.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Swagger::Blocks</span></span></span><br><span class="line">  <span class="class"><span class="keyword">module</span> <span class="title">ClassMethods</span></span></span><br><span class="line">    private</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fja_swagger_schema</span><span class="params">(schema_name)</span></span></span><br><span class="line">      swagger_schema <span class="string">"<span class="subst">#&#123;schema_name&#125;</span>Response"</span>.to_sym,</span><br><span class="line">                     <span class="symbol">required:</span> [<span class="symbol">:id</span>, <span class="symbol">:type</span>, <span class="symbol">:attributes</span>],</span><br><span class="line">                     <span class="symbol">additionalProperties:</span> <span class="literal">false</span> <span class="keyword">do</span></span><br><span class="line">        property <span class="symbol">:id</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">        property <span class="symbol">:type</span>, <span class="symbol">type:</span> <span class="symbol">:string</span></span><br><span class="line">        property <span class="symbol">:attributes</span>, <span class="string">'$ref'</span>: schema_name.to_sym</span><br><span class="line">        <span class="keyword">yield</span>(<span class="keyword">self</span>) <span class="keyword">if</span> block_given?</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Swagger::Blocks::Nodes</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">ResponseNode</span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fja_response_schema</span><span class="params">(type, schema_name)</span></span></span><br><span class="line">      schema <span class="keyword">do</span></span><br><span class="line">        key <span class="symbol">:type</span>, <span class="symbol">:object</span></span><br><span class="line">        key <span class="symbol">:required</span>, [<span class="symbol">:data</span>]</span><br><span class="line">        property <span class="symbol">:data</span> <span class="keyword">do</span></span><br><span class="line">          key <span class="symbol">:type</span>, type.to_sym</span><br><span class="line">          <span class="keyword">if</span> type.to_sym === <span class="symbol">:array</span></span><br><span class="line">            items <span class="keyword">do</span></span><br><span class="line">              key <span class="symbol">:<span class="string">'$ref'</span></span>, <span class="string">"<span class="subst">#&#123;schema_name&#125;</span>Response"</span>.to_sym</span><br><span class="line">            <span class="keyword">end</span></span><br><span class="line">          <span class="keyword">elsif</span> type.to_sym === <span class="symbol">:object</span></span><br><span class="line">            key <span class="symbol">:type</span>, type.to_sym</span><br><span class="line">            key <span class="symbol">:<span class="string">'$ref'</span></span>, <span class="string">"<span class="subst">#&#123;schema_name&#125;</span>Response"</span>.to_sym</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            raise Error.new <span class="string">"Unexpected schema type:<span class="subst">#&#123;type&#125;</span> name:<span class="subst">#&#123;schema_name&#125;</span>"</span></span><br><span class="line">          <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>Model 側で記述した <code>swagger_schema :Book</code> を用いて <code>fja_swagger_schema :Book</code> で fastjson_api のレスポンス形式の定義が記述できる．<br>そして Controller 側の <code>fja_response_schema :array, :Book</code> で API レスポンス定義として使える．</p><h2 id="swagger-blocks-の記述から-JSON-を生成する"><a href="#swagger-blocks-の記述から-JSON-を生成する" class="headerlink" title="swagger-blocks の記述から JSON を生成する"></a>swagger-blocks の記述から JSON を生成する</h2><p>ここまでで記述してきた Model と Controller を集約し，<code>Swagger::Blocks.build_root_json(SWAGGERED_CLASSES)</code> によって Swagger JSON を生成する．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/concerns/swagger/api_docs.rb</span></span><br><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Swagger::ApiDocs</span></span></span><br><span class="line">  extend ActiveSupport::Concern</span><br><span class="line">  <span class="keyword">include</span> Swagger::Blocks</span><br><span class="line"></span><br><span class="line">  included <span class="keyword">do</span></span><br><span class="line">    swagger_root <span class="keyword">do</span></span><br><span class="line">      key <span class="symbol">:swagger</span>, <span class="string">'2.0'</span></span><br><span class="line">      info <span class="keyword">do</span></span><br><span class="line">        key <span class="symbol">:version</span>, <span class="string">'1.0.0'</span></span><br><span class="line">        key <span class="symbol">:title</span>, <span class="string">'swagger-blocks with fastjson_api'</span></span><br><span class="line">        key <span class="symbol">:description</span>, <span class="string">'swagger-blocks with fastjson_api'</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      key <span class="symbol">:produces</span>, [<span class="string">'application/json'</span>]</span><br><span class="line">      key <span class="symbol">:consumes</span>, [<span class="string">'application/json'</span>]</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    SWAGGERED_CLASSES = [</span><br><span class="line">        <span class="comment"># models</span></span><br><span class="line">        Book,</span><br><span class="line"></span><br><span class="line">        <span class="comment"># controllers</span></span><br><span class="line">        Api::BooksController,</span><br><span class="line"></span><br><span class="line">        <span class="keyword">self</span></span><br><span class="line">    ].freeze</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">swagger_data</span></span></span><br><span class="line">    Swagger::Blocks.build_root_json(SWAGGERED_CLASSES)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>デバッグ用に，ローカル開発中に Swagger 定義を確認できるエンドポイントを用意する．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app/controllers/api/swagger_controller.rb</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api::SwaggerController</span> &lt; ActionController::Base</span></span><br><span class="line">  <span class="keyword">include</span> Swagger::ApiDocs</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">index</span></span></span><br><span class="line">    render <span class="symbol">json:</span> swagger_data, <span class="symbol">status:</span> <span class="symbol">:ok</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># config/routes.rb</span></span><br><span class="line"> namespace <span class="symbol">:api</span>, <span class="symbol">defaults:</span> &#123;<span class="symbol">format:</span> <span class="symbol">:json</span>&#125; <span class="keyword">do</span></span><br><span class="line">    resources <span class="symbol">:swagger</span>, <span class="symbol">only:</span> [<span class="symbol">:index</span>] <span class="keyword">unless</span> Rails.env.production?</span><br><span class="line"></span><br><span class="line">•••</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>http://localhost:3000/api/swagger</code> にアクセスすると次のような JSON が得られる．<br>定義が間違っているときはこの生成自体エラーになることが大半だが，生成できても意図しない動作するときなどのデバッグに使う．<br><a href="https://swagger.io/tools/swagger-ui/" target="_blank" rel="noopener">swagger-ui</a> とかに JSON を食わせて見やすくするなども可能．</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"swagger"</span>:<span class="string">"2.0"</span>,<span class="attr">"info"</span>:&#123;<span class="attr">"version"</span>:<span class="string">"1.0.0"</span>,<span class="attr">"title"</span>:<span class="string">"swagger-blocks with fastjson_api"</span>,<span class="attr">"description"</span>:<span class="string">"swagger-blocks with fastjson_api"</span>&#125;,<span class="attr">"produces"</span>:[<span class="string">"application/json"</span>],<span class="attr">"consumes"</span>:[<span class="string">"application/json"</span>],<span class="attr">"paths"</span>:&#123;<span class="attr">"/api/books"</span>:&#123;<span class="attr">"get"</span>:&#123;<span class="attr">"operationId"</span>:<span class="string">"getBooks"</span>,<span class="attr">"tags"</span>:[<span class="string">"sampleApp"</span>],<span class="attr">"parameters"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"id"</span>,<span class="attr">"in"</span>:<span class="string">"path"</span>,<span class="attr">"required"</span>:<span class="literal">true</span>,<span class="attr">"type"</span>:<span class="string">"integer"</span>,<span class="attr">"format"</span>:<span class="string">"int64"</span>&#125;],<span class="attr">"responses"</span>:&#123;<span class="attr">"200"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Books response"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"required"</span>:[<span class="string">"data"</span>],<span class="attr">"properties"</span>:&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"array"</span>,<span class="attr">"items"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/BookResponse"</span>&#125;&#125;&#125;&#125;&#125;,<span class="attr">"404"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Resource not found"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;&#125;&#125;,<span class="attr">"post"</span>:&#123;<span class="attr">"operationId"</span>:<span class="string">"createBook"</span>,<span class="attr">"tags"</span>:[<span class="string">"sampleApp"</span>],<span class="attr">"consumes"</span>:[<span class="string">"multipart/form-data"</span>],<span class="attr">"parameters"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"body"</span>,<span class="attr">"in"</span>:<span class="string">"body"</span>,<span class="attr">"required"</span>:<span class="literal">true</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/CreateBookRequest"</span>&#125;&#125;],<span class="attr">"responses"</span>:&#123;<span class="attr">"201"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Book response"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"required"</span>:[<span class="string">"data"</span>],<span class="attr">"properties"</span>:&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"$ref"</span>:<span class="string">"#/definitions/BookResponse"</span>&#125;&#125;&#125;&#125;,<span class="attr">"400"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Invalid parameters"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;,<span class="attr">"422"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Unprocessable Entity"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;&#125;&#125;&#125;,<span class="attr">"/api/books/&#123;id&#125;"</span>:&#123;<span class="attr">"get"</span>:&#123;<span class="attr">"operationId"</span>:<span class="string">"getBook"</span>,<span class="attr">"tags"</span>:[<span class="string">"sampleApp"</span>],<span class="attr">"parameters"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"id"</span>,<span class="attr">"in"</span>:<span class="string">"path"</span>,<span class="attr">"required"</span>:<span class="literal">true</span>,<span class="attr">"type"</span>:<span class="string">"integer"</span>,<span class="attr">"format"</span>:<span class="string">"int64"</span>&#125;],<span class="attr">"responses"</span>:&#123;<span class="attr">"200"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Book response"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"required"</span>:[<span class="string">"data"</span>],<span class="attr">"properties"</span>:&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"$ref"</span>:<span class="string">"#/definitions/BookResponse"</span>&#125;&#125;&#125;&#125;,<span class="attr">"404"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Resource not found"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;&#125;&#125;,<span class="attr">"put"</span>:&#123;<span class="attr">"operationId"</span>:<span class="string">"updateBook"</span>,<span class="attr">"tags"</span>:[<span class="string">"sampleApp"</span>],<span class="attr">"consumes"</span>:[<span class="string">"multipart/form-data"</span>],<span class="attr">"parameters"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"id"</span>,<span class="attr">"in"</span>:<span class="string">"path"</span>,<span class="attr">"required"</span>:<span class="literal">true</span>,<span class="attr">"type"</span>:<span class="string">"integer"</span>,<span class="attr">"format"</span>:<span class="string">"int64"</span>&#125;,&#123;<span class="attr">"name"</span>:<span class="string">"body"</span>,<span class="attr">"in"</span>:<span class="string">"body"</span>,<span class="attr">"required"</span>:<span class="literal">true</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/UpdateBookRequest"</span>&#125;&#125;],<span class="attr">"responses"</span>:&#123;<span class="attr">"200"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Book response"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"required"</span>:[<span class="string">"data"</span>],<span class="attr">"properties"</span>:&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>,<span class="attr">"$ref"</span>:<span class="string">"#/definitions/BookResponse"</span>&#125;&#125;&#125;&#125;,<span class="attr">"400"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Invalid parameters"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;,<span class="attr">"422"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Unprocessable Entity"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;,<span class="attr">"404"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Resource not found"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;&#125;&#125;,<span class="attr">"delete"</span>:&#123;<span class="attr">"operationId"</span>:<span class="string">"deleteBook"</span>,<span class="attr">"tags"</span>:[<span class="string">"sampleApp"</span>],<span class="attr">"parameters"</span>:[&#123;<span class="attr">"name"</span>:<span class="string">"id"</span>,<span class="attr">"in"</span>:<span class="string">"path"</span>,<span class="attr">"required"</span>:<span class="literal">true</span>,<span class="attr">"type"</span>:<span class="string">"integer"</span>,<span class="attr">"format"</span>:<span class="string">"int64"</span>&#125;],<span class="attr">"responses"</span>:&#123;<span class="attr">"204"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"No content response"</span>,<span class="attr">"schema"</span>:&#123;&#125;&#125;,<span class="attr">"400"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Invalid parameters"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;,<span class="attr">"422"</span>:&#123;<span class="attr">"description"</span>:<span class="string">"Unprocessable Entity"</span>,<span class="attr">"schema"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/ErrorOutput"</span>&#125;&#125;&#125;&#125;&#125;&#125;,<span class="attr">"definitions"</span>:&#123;<span class="attr">"Book"</span>:&#123;<span class="attr">"required"</span>:[<span class="string">"title"</span>,<span class="string">"description"</span>,<span class="string">"image_url"</span>],<span class="attr">"additionalProperties"</span>:<span class="literal">false</span>,<span class="attr">"properties"</span>:&#123;<span class="attr">"id"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"integer"</span>&#125;,<span class="attr">"title"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"description"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"image_url"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"created_at"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"updated_at"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;&#125;&#125;,<span class="attr">"BookResponse"</span>:&#123;<span class="attr">"required"</span>:[<span class="string">"id"</span>,<span class="string">"type"</span>,<span class="string">"attributes"</span>],<span class="attr">"additionalProperties"</span>:<span class="literal">false</span>,<span class="attr">"properties"</span>:&#123;<span class="attr">"id"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"type"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"attributes"</span>:&#123;<span class="attr">"$ref"</span>:<span class="string">"#/definitions/Book"</span>&#125;&#125;&#125;,<span class="attr">"CreateBookRequest"</span>:&#123;<span class="attr">"additionalProperties"</span>:<span class="literal">false</span>,<span class="attr">"properties"</span>:&#123;<span class="attr">"title"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"description"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"image"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>&#125;&#125;&#125;,<span class="attr">"UpdateBookRequest"</span>:&#123;<span class="attr">"additionalProperties"</span>:<span class="literal">false</span>,<span class="attr">"properties"</span>:&#123;<span class="attr">"title"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"description"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;,<span class="attr">"image"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"object"</span>&#125;&#125;&#125;,<span class="attr">"ErrorOutput"</span>:&#123;<span class="attr">"required"</span>:[<span class="string">"errors"</span>],<span class="attr">"additionalProperties"</span>:<span class="literal">false</span>,<span class="attr">"properties"</span>:&#123;<span class="attr">"errors"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"array"</span>,<span class="attr">"items"</span>:&#123;<span class="attr">"type"</span>:<span class="string">"string"</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="TBA"><a href="#TBA" class="headerlink" title="TBA"></a>TBA</h2><ul><li>Part2: コード生成編</li><li>Part3: 自動テスト編</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rails プロジェクトで クライアント向けの APIClient を自動生成するときの構成を試してみた．&lt;br&gt;Swagger で記述した API 定義からコード生成する例はちらほら見かけるが，Netflix 製の &lt;a href=&quot;https://github.com/
      
    
    </summary>
    
    
    
      <category term="rails" scheme="https://blog.tanaka.world/tags/rails/"/>
    
      <category term="swagger" scheme="https://blog.tanaka.world/tags/swagger/"/>
    
      <category term="fastjson-api" scheme="https://blog.tanaka.world/tags/fastjson-api/"/>
    
  </entry>
  
  <entry>
    <title>メルペイ 会社・事業説明会 for エンジニア</title>
    <link href="https://blog.tanaka.world/merpay-engineering-meetup-2/"/>
    <id>https://blog.tanaka.world/merpay-engineering-meetup-2/</id>
    <published>2019-04-17T14:00:00.000Z</published>
    <updated>2020-12-25T03:35:42.866Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mercari.connpass.com/event/126795/" target="_blank" rel="noopener">メルペイ 会社・事業説明会 for エンジニア #2</a> にて Manager x メンバーのパネルディスカッションに出ました．</p><p>モデレータとして EM の <a href="https://twitter.com/keigow" target="_blank" rel="noopener">@keigow</a> さんがメンバーからは Backend の <a href="https://twitter.com/Konboi" target="_blank" rel="noopener">@konboi</a>さん，SRE の <a href="https://twitter.com/tkuchiki" target="_blank" rel="noopener">@tkuchiki</a> さん，Frontend として自分がパネルをした．<br>メルペイ開発の進め方や，入社前後のギャップなどについて話した．入社後約 9 ヶ月のこれまでを振り返るいい機会もなった．</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://mercari.connpass.com/event/126795/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;メルペイ 会社・事業説明会 for エンジニア #2&lt;/a&gt; にて Manager x メンバーのパネルデ
      
    
    </summary>
    
    
    
      <category term="meetup" scheme="https://blog.tanaka.world/tags/meetup/"/>
    
  </entry>
  
  <entry>
    <title>英会話を3ヶ月間毎日やってみた感想</title>
    <link href="https://blog.tanaka.world/english-conversation-every-day-3-month/"/>
    <id>https://blog.tanaka.world/english-conversation-every-day-3-month/</id>
    <published>2019-03-31T05:00:00.000Z</published>
    <updated>2020-12-25T03:35:42.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="モチベーション"><a href="#モチベーション" class="headerlink" title="モチベーション"></a>モチベーション</h2><p>自分の実力は次のように自覚している．</p><ul><li>日常で英語の読み書きはしている</li><li>英語で話すことに苦手意識がある</li><li>海外旅行に行って<strong>旅行者としては</strong>困らないくらいのコミュニケーションはできる</li><li>TOEIC は受けたことがない</li></ul><p>モチベーションは２つある．</p><h4 id="会社メンバーと英語でコミュニケーションしたい"><a href="#会社メンバーと英語でコミュニケーションしたい" class="headerlink" title="会社メンバーと英語でコミュニケーションしたい"></a>会社メンバーと英語でコミュニケーションしたい</h4><p>メルペイには外国籍の同僚や普通に英語しゃべっている日本人も多いのがモチベーションの一つになっている．<br>去年の秋頃，English Speaker の方々との会議があった．何をしゃべっているかは所々わかるが，発言しようと思ってもパッと英語が出てこずこれが割とショックだったのを覚えている．当然ながら，海外旅行で話すのと，普段日本語で話していること仕事のことを英語で話せるかどうかは全く別問題．</p><h4 id="海外挙式"><a href="#海外挙式" class="headerlink" title="海外挙式"></a>海外挙式</h4><p>今年の10月に海外挙式を予定している．奥さんが以前留学していたところに家族で行きたいという理由で，シアトル🇺🇸で挙式をすることに決めた．<br>昨年末に具体的に場所を決め，全てメールで現場の担当者とやりとりをしている．今はメールだけなので全く不自由はしていないが，細かいところとか電話や対面でちゃんと話せるようにしたい．</p><h2 id="やったこと"><a href="#やったこと" class="headerlink" title="やったこと"></a>やったこと</h2><p>この３ヶ月は大枠３つのことをやっていた．</p><h4 id="1-DMM英会話"><a href="#1-DMM英会話" class="headerlink" title="1. DMM英会話"></a>1. DMM英会話</h4><p><a href="https://eikaiwa.dmm.com/" target="_blank" rel="noopener">DMM英会話</a></p><p>会社の補助も受けれるが，今は自分で課金している．スタンダードプラン毎日1レッスンで5980円/月で毎日1レッスン25分，Skype 英会話ができる．とても安い．</p><p><img src="dmm_summary.png" alt="dmm_summary.png" title="dmm_summary.png"><br>1回25分，毎日やるとこういう感じになる．トータルの時間でランクがつくようになっている．</p><p><strong>❏ レッスン内容</strong></p><p>ここ3ヶ月にやった内容</p><ul><li>1月 Free Conversation</li><li>2月 Daily News</li><li>3月 Daily News / Conversation</li></ul><p>1月はやり初めでDMM英会話の使い方をよくわかっていなかった．1月はとりあえず会話に慣れる期間として Free Conversation だけやっていた．現地で流行っているスマホアプリの話や好きな映画の話，仕事の話などを話していた．</p><p>ある日「普段どういうレッスンやってるの？」とチューターから聞かれて「Free Conversation しかやっていない」という話をしたら，「教材やった方がいいよ」というアドバイスをもらった．公式の<a href="https://eikaiwa.dmm.com/app/materials/en" target="_blank" rel="noopener">レッスン教材</a>がありこれがよくできている．</p><p>確かに Free Conversation だけだと自分が興味があったり理解している内容しか話さなくなってしまい，よくないと感じた．教材だと世界のニュースや会話シチュエーションが用意されていて毎回新しいフレーズと出会うチャンスがある．</p><p>こういう話題もあり，日本語でもディスカッション難しいような内容もあるが，これくらいの方が話す練習にはなりそうと思っている．</p><blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">これ日本語でディスカッションするのもムズイw<br><br>&quot;$90,000 Bonsai Tree Stolen in Saitama&quot;<a href="https://t.co/6acxa3Bhip" target="_blank" rel="noopener">https://t.co/6acxa3Bhip</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1099982275930816512?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">February 25, 2019</a></blockquote><p>2月末から<a href="https://eikaiwa.dmm.com/blog/57029/" target="_blank" rel="noopener">新レッスンシステム</a>が提供開始された．自分ののブラウザで開いている情報がリアルタイムにチューターに共有され，例えばテキストをハイライトすると，どこを選択しているかなどが相手にリアルタイム共有される．</p><p><strong>❏ チューター</strong></p><p>チューターは毎回新しい人，時々リピートになる．当日予約すると人気のある人は大抵スケジュールが埋まっていて，リピートしたくてもそもそもできない．誰とやるかは正直誰でもいいと思っていて同じ人に慣れてしまわないようにくらいの意識．<br>メダルコレクションというのがあり，チューター出身国ごとの受講回数でメダルがもらえる．自分のプランだと English ネイティブは予約できないので，英語を第２言語として話している国の人としかやっていない．</p><p><img src="dmm_medal_collection.png" alt="dmm_medal_collection.png" title="dmm_medal_collection.png"></p><p><strong>❏ いつやるか</strong></p><p>毎日朝起きてからその日にやる時間を決めている．予め毎日時間を定例決めておくスタイルだと，予定が差し込まれたときにリスケするのが面倒でやらなくなる原因になりそうだったのを懸念した．<br>平日は会社のプライベートルームが空いている時間に予約して使っている．英会話自体は２５分，１時間部屋を確保して初め３０分は予習とか他の復習に使っている．プライベートルーム本当にありがたい．休日は家でやっている．</p><h4 id="2-Hapa英会話-Podcast-YouTube"><a href="#2-Hapa英会話-Podcast-YouTube" class="headerlink" title="2. Hapa英会話 Podcast/YouTube"></a>2. Hapa英会話 Podcast/YouTube</h4><ul><li><a href="https://hapaeikaiwa.com/category/podcast-column/" target="_blank" rel="noopener">Hapa英会話 Podcast</a></li><li><a href="https://www.youtube.com/channel/UCsSuev_h2XixlD6FFGADI6w" target="_blank" rel="noopener">Hapa英会話 YouTube Channel</a></li></ul><p>Podcast の方は以前から聞いていて，今年からは YouTube Channel を観始めた．ネイティブがXXXなケースでどう話すか？という視点で，語彙の使い方を解説していてとても実践的．</p><h4 id="3-Shuffle-Lunch"><a href="#3-Shuffle-Lunch" class="headerlink" title="3. Shuffle Lunch"></a>3. Shuffle Lunch</h4><p>週１回 English Speaker とランチに行けるメルカリの制度．EnglishSpeaker:Japanese = 1:3 の4人が1グループで毎月グループが入れ替わる．<br>普段やっている Skype 英会話で練習していることをアウトプットする場として捉えている．</p><p>予定はカレンダーで予め確保されるが，皆業務の関係で欠席しがち．自分はよほどのことがない限り欠席しないようにしているので，1 on 1 になったり飛び入り参加の English Speaker と 3:1 みたいになったりすることもある（正直メチャメチャ緊張する）．普段業務でかかわらない人とも話せるのも楽しい．</p><h2 id="ただ毎日やるだけではダメ"><a href="#ただ毎日やるだけではダメ" class="headerlink" title="ただ毎日やるだけではダメ"></a>ただ毎日やるだけではダメ</h2><p>あるセルビアのチューターからこんなことを言われた</p><blockquote><p>僕は英会話を4年間続けている生徒を知っている．ただ闇雲に英会話を継続したその人は，もはや全く上達していない．DMMには色々な教材があるのだからそれを一つずつやっていった方がいいよ．</p></blockquote><p>毎日なんとなくしゃべるだけではダメという風に理解した．その日うまく言葉にできなかったフレーズを振り返ったり，聞き取れなかったフレーズ，わからなかった単語をまとめるといった復習もそれからはやるようにしている．将棋でもそうだけど，ただオンライン将棋を闇雲に指していると頭打ちになる．実践のやりっぱなしは何事に於いてもよくないのは明白．</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p><a href="https://blog.tanaka.world/2018/#2019-%E5%B9%B4">昨年末の振り返り</a>で <code>英会話を毎日やる</code> という目標を立てた．<br>自分の性格だと１日やらない日があると，明日でいいやと先延ばしにしてしまい結局挫折してしまいそうなので，敢えて毎日という目標にした．<br>過去に何度も英会話やらねばと思ってはいても続かず挫折していたが，今のところ2019年は毎日続いている．</p><p>3ヶ月で英語を話す瞬発力的なものは身についてきたのと，「わからないことをわからない」と言えるようになったのが大きかった．どういう風に聞き返せばいいかわからなかったのと，なんとなく気まずさから聞き流してしまうことがあったが今はちゃんと意味を理解するまで聞いている．</p><p>今後は Vocabrary の幅を増やす必要がありそう．言いたいことを文章にして伝えられるが少ない語彙の組み合わせだけだと回りくどい表現になっていると感じている（会話する人からも言われる）．<br>これからも工夫しながら続けていこうと思う．</p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;モチベーション&quot;&gt;&lt;a href=&quot;#モチベーション&quot; class=&quot;headerlink&quot; title=&quot;モチベーション&quot;&gt;&lt;/a&gt;モチベーション&lt;/h2&gt;&lt;p&gt;自分の実力は次のように自覚している．&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;日常で英語の読み書きはしている&lt;/l
      
    
    </summary>
    
    
    
      <category term="english" scheme="https://blog.tanaka.world/tags/english/"/>
    
  </entry>
  
  <entry>
    <title>2018年の振り返り</title>
    <link href="https://blog.tanaka.world/2018/"/>
    <id>https://blog.tanaka.world/2018/</id>
    <published>2018-12-29T10:05:25.000Z</published>
    <updated>2020-12-31T05:01:16.813Z</updated>
    
    <content type="html"><![CDATA[<p>激動の一年でした．</p><h2 id="SXSW"><a href="#SXSW" class="headerlink" title="SXSW"></a>SXSW</h2><p>3 月にアメリカ/テキサス州オースティンで行われた <a href="https://www.sxsw.com/world/day-in-pictures/" target="_blank" rel="noopener">SXSW:SouthBySouthWest</a> というイベントに <a href="https://www.curiosity-inc.jp/solution/real-fantasy" target="_blank" rel="noopener">Real Fantasy</a> を出展しました．毎年 3 月にテキサスで行われている音楽・映画・テクノロジーの祭典で約2週間オースティンの待ちがお祭りになります．自分たちの出展期間は 4 日間でした．👉 <a href="https://www.curiosity-inc.jp/archives/1778" target="_blank" rel="noopener">Release</a></p><p><img src="sxsw-members.JPG" alt="sxsw-members.JPG" title="sxsw-members.JPG"></p><p>出展の荷物たち．入国審査や現地ついてからの運搬が地獄でした．</p><p><img src="sxsw-packs.JPG" alt="sxsw-packs.JPG" title="sxsw-packs.JPG"></p><p>2 週間 AirBnB で家借りて社のメンバー 3 人で住み，出展期間が終わるまでは UberEats を食べながらバグ直したり開発合宿のような日々でした．</p><p><img src="sxsw-air-bnb.JPG" alt="sxsw-air-bnb.JPG" title="sxsw-air-bnb.JPG"></p><p>滞在中はドライバーとしても活躍しました．一人で車借りたり，買い出し行ったりして現地で生活したらこんな感じなのかと，生活を疑似体験したのもいい思い出です．</p><p><img src="sxsw-car.JPG" alt="sxsw-car.JPG" title="sxsw-car.JPG"></p><p>貴重な経験をさせてもらったこと，とても感謝しています．</p><h2 id="Proff"><a href="#Proff" class="headerlink" title="Proff"></a>Proff</h2><p><img src="proff_main_.png" alt="proff_main_.png" title="proff_main_.png"></p><p><a href="https://proff.io/" target="_blank" rel="noopener">Proff - スマート履歴書「プロフ」</a></p><p>今年は多くの人に認知され使ってもらえるサービスになりました．元々，レジュメを管理するサービスでよいのがなく，Google SpreadSheets で管理していました．海外のサービスで<a href="https://www.visualcv.com/" target="_blank" rel="noopener">こういうの</a>はありましたが，日本語でいい感じに表示してくるサービスがなく自分でつくり始めたのがキッカケでした．<a href="https://twitter.com/u_furuya" target="_blank" rel="noopener">@u_furuya</a> が出てくれた記事 <a href="https://jp.techcrunch.com/2018/08/20/proff-launched/" target="_blank" rel="noopener">履歴書作成ツール兼ポートフォリオサービス「Proff」正式公開——ロールモデルの提案ツール目指す</a> を皮切りにユーザー数がグッと増えました．人づてで同じ業界以外の人も使ってくれていることを聞いたり，採用担当してる人から Proff の履歴書でエントリー来たという声をもらい，非常に嬉しかったです．</p><h2 id="OSS"><a href="#OSS" class="headerlink" title="OSS"></a>OSS</h2><p>プロダクトつくる上で必要になった機能をチマチマ OSS にしてました．</p><ul><li><a href="https://github.com/tanakaworld/enum_select_rails" target="_blank" rel="noopener">enum_select_rails</a></li><li><a href="https://github.com/tanakaworld/rumojinize" target="_blank" rel="noopener">rumojinize</a> ( <a href="https://blog.tanaka.world/release-rumojinize/">blog</a> )</li><li><a href="https://github.com/tanakaworld/multi_seeds_rails" target="_blank" rel="noopener">multi_seeds_rails</a> ( <a href="https://blog.tanaka.world/release-multi-seed-rails/">blog</a> )</li><li><a href="https://github.com/tanakaworld/web_service_uri" target="_blank" rel="noopener">web_service_uri</a> ( <a href="https://blog.tanaka.world/release-web-service-uri/">blog</a> )</li><li><a href="https://github.com/tanakaworld/nuxt-sentry" target="_blank" rel="noopener">nuxt-sentry</a> ( <a href="https://qiita.com/tanakaworld/items/910d766361d398f43254" target="_blank" rel="noopener">qiita: Sentry で Nuxt.js のエラー検知 + 環境変数の扱いに関する Tips</a> )</li></ul><h2 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h2><ul><li>アメリカ - テキサス</li><li>米子・米子</li><li>島根</li><li>軽井沢</li><li>名古屋</li><li><a href="https://blog.tanaka.world/linepay-merchari-in-fukuoka/">福岡</a></li><li>中国 - <a href="https://blog.tanaka.world/shanhai-2018/">上海</a></li></ul><h2 id="転職"><a href="#転職" class="headerlink" title="転職"></a>転職</h2><p>8 月から<a href="https://jp.merpay.com/" target="_blank" rel="noopener">メルペイ</a>で働いています．早いものでもう 5 ヶ月経とうとしています．前職 curiosity では Web・アプリ・IoT など色々やらせてもらっていましたが，なんでもできるエンジニアから 1 度どれかにフォーカスしてスパイク分野をつくりたいという思いで転職を決めました．今のジョブタイトルは Software Engineer (Frontend) で文字通り Web フロントエンド開発をやっています（Vue•Nuxt/TypeScript/Docker/K8S/GCP）．</p><h2 id="入籍"><a href="#入籍" class="headerlink" title="入籍"></a>入籍</h2><p>12 / 3 に入籍しました🎉🎉🎉<br>日頃お世話になっている方々，公私ともに何卒よろしくおねがいします❗❗❗</p><p>👏<strong><a href="http://amzn.asia/7XLT2nk" target="_blank" rel="noopener">ほしいも</a></strong>✨</p><h2 id="2019-年"><a href="#2019-年" class="headerlink" title="2019 年"></a>2019 年</h2><h4 id="Proff-1"><a href="#Proff-1" class="headerlink" title="Proff"></a>Proff</h4><blockquote><p>編集画面の SPA 移行完了</p></blockquote><p>途中まで進めていた SPA 化を完了させたい．Turbolinks は使っているが，画面遷移時に都度ページ読み込みをしているのが現状．特に編集画面はサクサク使えてデータ入力も楽にするために注力していきたい所存．</p><blockquote><p>紙データの自動読み込み</p></blockquote><p>紙データは検索できない上，再編集もできない．一度作られた紙履歴書は，出す側も読む側もメリットないと思っている．主に toB 向けに大量取り込みできるようになるところまで持っていきたいと思う．</p><h4 id="英語"><a href="#英語" class="headerlink" title="英語"></a>英語</h4><blockquote><p>英<strong>会話</strong>を毎日やる</p></blockquote><p>業務上でも英語を話す機会がチラホラ出てきて，もっと円滑に話したい欲が増してきました．業務外のことでももっと気軽に話せるようになりたい．当然ながら使わないと錆びていくものなので，英語に関しては継続を KPI とします．</p><p><strong>2019 年よろしくおねがいします！！！！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;激動の一年でした．&lt;/p&gt;
&lt;h2 id=&quot;SXSW&quot;&gt;&lt;a href=&quot;#SXSW&quot; class=&quot;headerlink&quot; title=&quot;SXSW&quot;&gt;&lt;/a&gt;SXSW&lt;/h2&gt;&lt;p&gt;3 月にアメリカ/テキサス州オースティンで行われた &lt;a href=&quot;https://ww
      
    
    </summary>
    
    
    
      <category term="year-review" scheme="https://blog.tanaka.world/tags/year-review/"/>
    
  </entry>
  
  <entry>
    <title>2018年の積読リストを晒す</title>
    <link href="https://blog.tanaka.world/books-review-2018/"/>
    <id>https://blog.tanaka.world/books-review-2018/</id>
    <published>2018-12-28T04:11:45.000Z</published>
    <updated>2020-12-25T03:35:42.810Z</updated>
    
    <content type="html"><![CDATA[<p>普段から活字をよく読んでいるが，今年はいつにも増して本の購入量が増加し，そして積読量も増加した．</p><h2 id="本を買うモチベーションとルール"><a href="#本を買うモチベーションとルール" class="headerlink" title="本を買うモチベーションとルール"></a>本を買うモチベーションとルール</h2><h4 id="気になった本は秒でポチる"><a href="#気になった本は秒でポチる" class="headerlink" title="気になった本は秒でポチる"></a>気になった本は秒でポチる</h4><p>例えば Twitter のタイムラインとかでパッと目についただけでも出会った価値はある．<br>それとお金を投じたという事実によって，本を読まなければという状況を強制的につくることもできる．</p><h4 id="電子版を優先して購入する"><a href="#電子版を優先して購入する" class="headerlink" title="電子版を優先して購入する"></a>電子版を優先して購入する</h4><p>物理的な本は場所を取るので，基本的に全て処分した．読みたくなったら電子版を買い直せばよいと思っているし，紙の本を置いていても1年内に大半が読まれないだろう．</p><p>現在の読書環境は iPhoneXMax の <a href="https://itunes.apple.com/us/app/amazon-kindle/id302584613" target="_blank" rel="noopener">Kindle アプリ</a>．Kindle であれば場所・時間を選ばす読みたいときに読める．Kindle 版がなければ ePub 版を探す．ここ数ヶ月で知ったのだが，iBooks アプリの体験もかなりよい．Kindle よりサクサク動くのが何よりよい．</p><h4 id="マンガはカラー版を買う"><a href="#マンガはカラー版を買う" class="headerlink" title="マンガはカラー版を買う"></a>マンガはカラー版を買う</h4><p>買い直すならちょっとお得感があった方がよい．<br>カラー版だと全ページがこんな感じで見ることができる．<br><img src="kindle-color-onepiece.PNG" alt="kindle-color-onepiece.PNG" title="kindle-color-onepiece.PNG"></p><p>モノクロと違って情報量も多く読みやすい．大体がモノクロ版と100円くらいの差なので，カラーは高いからと懸念している人は一度試してみてほしい．</p><h2 id="2018年-Kindle-購入リスト"><a href="#2018年-Kindle-購入リスト" class="headerlink" title="2018年 Kindle 購入リスト"></a>2018年 Kindle 購入リスト</h2><p>おおよそ購入順．</p><ul><li><a href="https://www.amazon.co.jp/dp/B074GWMRFC" target="_blank" rel="noopener">1440分の使い方 ──成功者たちの時間管理15の秘訣    </a></li><li><a href="https://www.amazon.co.jp/dp/B077JVLZ4T" target="_blank" rel="noopener">約束のネバーランド 7 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B010CQD4Y0" target="_blank" rel="noopener">10年戦えるデータ分析入門　SQLを武器にデータ活用時代を生き抜く (Informatics ＆IDEA)    </a></li><li><a href="https://www.amazon.co.jp/dp/B079TLW41L" target="_blank" rel="noopener">エンジニアリング組織論への招待　～不確実性に向き合う思考と組織のリファクタリング    </a></li><li><a href="https://www.amazon.co.jp/dp/B00F4TLKDI" target="_blank" rel="noopener">王様達のヴァイキング（１） (ビッグコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B074VY2JYR" target="_blank" rel="noopener">ジョジョの奇妙な冒険 第8部 モノクロ版 16,17 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B00NBGTUJ2" target="_blank" rel="noopener">昆虫はすごい (光文社新書)    </a></li><li><a href="https://www.amazon.co.jp/dp/B079Y5XZ5Z" target="_blank" rel="noopener">約束のネバーランド 8 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07BGVZLDZ" target="_blank" rel="noopener">10年後の仕事図鑑    </a></li><li><a href="https://www.amazon.co.jp/dp/B07BNFS5PP" target="_blank" rel="noopener">世界一シンプルで科学的に証明された究極の食事    </a></li><li><a href="https://www.amazon.co.jp/dp/B00ATLLJ3M" target="_blank" rel="noopener">ONE PIECE カラー版 48〜82 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B009DEMC8W" target="_blank" rel="noopener">一九八四年 (ハヤカワepi文庫)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07BFSJN97" target="_blank" rel="noopener">異常探偵　宇宙船 (単行本)    </a></li><li><a href="https://www.amazon.co.jp/dp/B0798BNCYG" target="_blank" rel="noopener">プラットフォーム革命――経済を支配するビジネスモデルはどう機能し、どう作られるのか    </a></li><li><a href="https://www.amazon.co.jp/dp/B0792S3TTR" target="_blank" rel="noopener">ONE PIECE モノクロ版 88 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07CC9T7G6" target="_blank" rel="noopener">宇宙兄弟（３３） (モーニングコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07CLKMR38" target="_blank" rel="noopener">遅刻してくれて、ありがとう(上) 常識が通じない時代の生き方 遅刻してくれて、ありがとう 常識が通じない時代の生き方    </a></li><li><a href="https://www.amazon.co.jp/dp/B07L8WKTFF/ref=dp-kindle-redirect?_encoding=UTF8&btkr=1" target="_blank" rel="noopener">狂四郎2030【期間限定無料】 1〜３ (ヤングジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B0747JS1HY" target="_blank" rel="noopener">なめらかなお金がめぐる社会。 あるいは、なぜあなたは小さな経済圏で生きるべきなのか、ということ。    </a></li><li><a href="https://www.amazon.co.jp/dp/B07CGB6DWM" target="_blank" rel="noopener">約束のネバーランド 9 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B009S7CDOM" target="_blank" rel="noopener">Ｖ字回復の経営　2年で会社を変えられますか 企業変革ドラマ (日経ビジネス人文庫)    </a></li><li><a href="https://www.amazon.co.jp/dp/B00ATLLK4A" target="_blank" rel="noopener">NARUTO―ナルト― カラー版 全巻 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B074V23Y68" target="_blank" rel="noopener">インベスターZ 全巻    </a></li><li><a href="https://www.amazon.co.jp/dp/B07DWTZYMB" target="_blank" rel="noopener">ジョジョの奇妙な冒険 第8部 モノクロ版 18 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B012EODH18" target="_blank" rel="noopener">はたらく細胞（１〜５） (シリウスコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07B2R1ZDL" target="_blank" rel="noopener">OKR（オーケーアール）    </a></li><li><a href="https://www.amazon.co.jp/dp/B01AJHAK12" target="_blank" rel="noopener">マンガ　サ道～マンガで読むサウナ道～（１） (モーニングコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B074PQW279" target="_blank" rel="noopener">創世のタイガ（１） (イブニングコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B00LIQMVLQ" target="_blank" rel="noopener">センスは知識からはじまる    </a></li><li><a href="https://www.amazon.co.jp/dp/B07GWJCBVP" target="_blank" rel="noopener">NETFLIXの最強人事戦略～自由と責任の文化を築く～    </a></li><li><a href="https://www.amazon.co.jp/dp/B07FSBHS2V" target="_blank" rel="noopener">Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07J6FP6NQ" target="_blank" rel="noopener">Vue.js入門 基礎から実践アプリケーション開発まで    </a></li><li><a href="https://www.amazon.co.jp/dp/B07CG63YCS" target="_blank" rel="noopener">誰もが嘘をついている～ビッグデータ分析が暴く人間のヤバい本性～    </a></li><li><a href="https://www.amazon.co.jp/dp/B00TCM8TB4" target="_blank" rel="noopener">Inspired: 顧客の心を捉える製品の創り方    </a></li><li><a href="https://www.amazon.co.jp/dp/B07DWW3GM3" target="_blank" rel="noopener">約束のネバーランド 10 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B00UBSPBPA" target="_blank" rel="noopener">人を動かす　新装版    </a></li><li><a href="https://www.amazon.co.jp/dp/B07G764QKM" target="_blank" rel="noopener">VRは脳をどう変えるか？　仮想現実の心理学 (文春e-book)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07H5FW5SD" target="_blank" rel="noopener">政権奪取論　強い野党の作り方 (朝日新書)    </a></li><li><a href="https://www.amazon.co.jp/dp/B0026OR2NQ" target="_blank" rel="noopener">Hackers &amp; Painters: Big Ideas from the Computer Age (English Edition)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07JWDZ4RS" target="_blank" rel="noopener">宇宙兄弟（３４） (モーニングコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B076H49W1G" target="_blank" rel="noopener">Design Systems (Smashing eBooks) (English Edition)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07HQB9Q85" target="_blank" rel="noopener">約束のネバーランド 11 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B01JADEJTK" target="_blank" rel="noopener">なぜ、あなたの話はつまらないのか？    </a></li><li><a href="https://www.amazon.co.jp/dp/B07CSR9KLM" target="_blank" rel="noopener">七つの大罪（２６〜３１） (週刊少年マガジンコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B00KRB9U8K" target="_blank" rel="noopener">詳解UNIXプログラミング 第3版    </a></li><li><a href="https://www.amazon.co.jp/dp/B07KF9PMF5" target="_blank" rel="noopener">メルカリ 希代のスタートアップ、野心と焦りと挑戦の5年間    </a></li><li><a href="https://www.amazon.co.jp/dp/B07BRT5372" target="_blank" rel="noopener">まんがでわかる　理科系の作文技術    </a></li><li><a href="https://www.amazon.co.jp/dp/B07HQG3B5T" target="_blank" rel="noopener">ジョジョの奇妙な冒険 第8部 モノクロ版 19 (ジャンプコミックスDIGITAL)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07DXXCPFV" target="_blank" rel="noopener">サルたちの狂宴　（上）　シリコンバレー修業篇 (早川書房)    </a></li><li><a href="https://www.amazon.co.jp/dp/B07DXT1JKL" target="_blank" rel="noopener">サルたちの狂宴　（下）　フェイスブック乱闘篇 (早川書房)    </a></li><li><a href="https://www.amazon.co.jp/dp/B009KYCDN4" target="_blank" rel="noopener">少女ファイト（１〜４） (イブニングコミックス)    </a></li><li><a href="https://www.amazon.co.jp/dp/B00JGR3T5G" target="_blank" rel="noopener">コーチングのプロが教える　「ほめる」技術    </a></li><li><a href="https://www.amazon.co.jp/dp/B00K1A75N4" target="_blank" rel="noopener">予想どおりに不合理　　行動経済学が明かす「あなたがそれを選ぶわけ」    </a></li><li><a href="https://www.amazon.co.jp/dp/B009KWUDME" target="_blank" rel="noopener">プラネテス（１〜４） (モーニングコミックス)    </a></li></ul><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>ブクマするかのごとく，Amazonの購入ボタンをクリックしていった結果がこれだ．<br>約半分が読破，半分が目次のみ・気になったところだけ読んだか，積読している．<br>なんだか罪悪感がある気もしたが，躊躇して購入しなければこの半分は読まなかったことになるので，結果的にはよかったと思っている．</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;普段から活字をよく読んでいるが，今年はいつにも増して本の購入量が増加し，そして積読量も増加した．&lt;/p&gt;
&lt;h2 id=&quot;本を買うモチベーションとルール&quot;&gt;&lt;a href=&quot;#本を買うモチベーションとルール&quot; class=&quot;headerlink&quot; title=&quot;本を買うモチ
      
    
    </summary>
    
    
    
      <category term="book" scheme="https://blog.tanaka.world/tags/book/"/>
    
      <category term="kindle" scheme="https://blog.tanaka.world/tags/kindle/"/>
    
  </entry>
  
  <entry>
    <title>行動経済学まんが ヘンテコノミクス</title>
    <link href="https://blog.tanaka.world/hent-economics/"/>
    <id>https://blog.tanaka.world/hent-economics/</id>
    <published>2018-12-16T08:26:51.000Z</published>
    <updated>2020-12-25T03:35:42.810Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://strobo.fm/episode/27/" target="_blank" rel="noopener">#strobofm ep.27</a>にて紹介されてて，即買いしてから積読していた本で，ようやく読了した．</p><p>Kindle 版はなく，普段紙の本は買わないようにしている自分としては久々の紙本だった．<br>湯船に浸かりながら読んでいてたらシワシワになってしまった．</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=4838729723&linkId=79330c1aaf0c2861cc6344766a56f01b"></iframe><h2 id="認知心理学用語"><a href="#認知心理学用語" class="headerlink" title="認知心理学用語"></a>認知心理学用語</h2><p>短いマンガの後に，認知心理学的視点の解説を入れるという形式の本でとても読みやすかった．</p><blockquote><p>行動経済学者リチャード・セイラーは，普段の生活の中で，非合理的な行動を起こしそうな時，私たちをナッジ＝ nudge i.e. 注意をひくために，人を肘でそっと小突いて知らせるためのものになっていくべきだ，という考え方を示している</p></blockquote><p>下記，目次+α 抜粋</p><ul><li>アンダーマイニング効果（報酬が動機を阻害する）</li><li>感動度逓減性（母数によって変わる価値）</li><li>フレーミング効果（枠組みを変えると価値が変わる）</li><li>社会を成立させているのは，モラルかお金か（罰金による罪の意識の軽減）</li><li>メンタル・アカウンティング（心の中で，お金の価値を計算する）</li><li>アンカリング効果（基準が判断に影響を及ぼす）</li><li>代表性のヒューリスティック（私たちはイメージに囚われる）</li><li>おとり効果（選択肢を生み出すことで，市民権を得る）</li><li>親近効果（終わりよければすべて良し）</li><li>極端回避（ついつい真ん中を選んでしまう）</li><li>保有効果（一度手にとった物は，手放したくなくなる）</li><li>プライミング効果（事前の情報が解釈を左右する）</li><li>ハロー効果（顕著な特徴だけで，物事を見極める）</li><li>上昇選好（だんだん良くなる方を好みます）</li><li>目標勾配仮説（ゴールに近づくほど，人間は「やる気」を起こす）</li><li>同調行動（集団の判断が，自分の判断を歪めてしまう）</li><li>認知的不協和の解消（不満な気持ちのバランスを散る）</li><li>参照点依存性（基準に引っ張られて，価値が変わる）</li><li>錯誤相関（関係ないこと同士に，関係があると思いこむ）</li><li>無料による選好の逆転（「タダ」が判断を狂わせる）</li><li>プラセボ効果（信じ込むことで，感覚さえも変えてしまう）</li><li>双曲割引（自分との距離が遠ければ，差を感じない）</li><li>サンク・コスト効果（一度費やしたコストを考えて止められずにさらなる深みに陥ってしまう）</li><li>デフォルト効果（初期値からわざわざ変えようとしない心理現象）</li><li>フォールス・コンセンサス（自分の意見が一般的だと思い込み，他者の意見を非常識と思い込んでしまうこと）</li><li>ピーク．エンドの法則（最も強い印象と最後の終わった瞬間の印象を，平均してしまう）</li><li>確実性効果（完璧さに対して過剰に反応するあまり，費用対効果を無視して１００％にすることに固執してしまうことがある）</li><li>確証バイアス（直感で正しそうな答えを発見すると，それに固執し別の可能性を頭から排除してしまう）</li><li>決定回避の法則（多数の選択肢を持つことは，一見，自由さの象徴のように思えますが，実際には多すぎる選択肢を生む迷いや戸惑いが決定を遠ざけてしまう）</li><li>少数の法則（少ないサンプルによる偏った結果を，何故か正しいと思い込んでしまう）</li><li>プロスペクト理論（利得・損失が関わる状況になると，主観的な評価が入り非合理的な判断をしてしまうことがある．例：同じ量の得と損を比較した時に，損の方を２倍も重大に感じてしまう傾向がある）</li><li>利用可能性ヒューリスティック（たまたま自分がそれ以前に見聞きして頭に思い浮かべやすかった事柄に影響される）</li></ul><h2 id="認知的不協和"><a href="#認知的不協和" class="headerlink" title="認知的不協和"></a>認知的不協和</h2><p>「認知的不協和」は自分にとって不都合なときに生まれる心の中の不快感のことを指す．この不協和を解消するために，本当はよい思ってもいない行動や言動をして心のバランスをとろうとする習性が人間にはある．</p><p> <a href="http://rebuild.fm/" target="_blank" rel="noopener">rebuild.fm</a> でよく言及されていて，開発現場でもよくあるよなぁという印象が強い．</p><ul><li><a href="http://rebuild.fm/73a/#t=00:23:59" target="_blank" rel="noopener">Aftershow 73: One-Letter Sushi (N, naan, naoya)</a></li><li><a href="http://rebuild.fm/85a/#t=00:09:24" target="_blank" rel="noopener">Aftershow 85: Rebuild Tour (naan, hak)</a></li><li><a href="http://rebuild.fm/137/#t=00:43:17" target="_blank" rel="noopener">137: Tested In Production (naoya)</a></li></ul><h2 id="関連書"><a href="#関連書" class="headerlink" title="関連書"></a>関連書</h2><p>行動経済学系の本は，アメリカのデューク大学の教授 ダン・アリエリー氏の本が有名らしい．ニューヨーク・タイムズでベストセラーになった「予想どおりに不合理　　行動経済学が明かす「あなたがそれを選ぶわけ」」を買ってみた．</p><iframe style="width:120px;height:240px;" marginwidth="0" marginheight="0" scrolling="no" frameborder="0" src="//rcm-fe.amazon-adsystem.com/e/cm?lt1=_blank&bc1=000000&IS2=1&bg1=FFFFFF&fc1=000000&lc1=0000FF&t=tanakayutaroa-22&language=ja_JP&o=9&p=8&l=as4&m=amazon&f=ifr&ref=as_ss_li_til&asins=B00K1A75N4&linkId=9418e21c05e772fd7d18941e0ce4b3cd"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://strobo.fm/episode/27/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;#strobofm ep.27&lt;/a&gt;にて紹介されてて，即買いしてから積読していた本で，ようやく読了した．&lt;/p&gt;
&lt;p&gt;Kindl
      
    
    </summary>
    
    
    
      <category term="book" scheme="https://blog.tanaka.world/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>Rails5 / webpacker を heroku で動かす</title>
    <link href="https://blog.tanaka.world/rails5-webpacker-on-heroku/"/>
    <id>https://blog.tanaka.world/rails5-webpacker-on-heroku/</id>
    <published>2018-11-25T14:13:03.000Z</published>
    <updated>2020-12-25T03:35:42.809Z</updated>
    
    <content type="html"><![CDATA[<p>Rails の開発環境をサクッ構築するために heroku を使ったときのメモ．</p><h2 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h2><ul><li>Rails 5.1.6</li><li>Ruby 2.4.x</li><li>MySQL</li><li>Webpacker つかう</li></ul><h2 id="Heroku-CLI"><a href="#Heroku-CLI" class="headerlink" title="Heroku CLI"></a>Heroku CLI</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ brew install heroku</span><br><span class="line"></span><br><span class="line"><span class="comment"># if already installed</span></span><br><span class="line">$ brew upgrade heroku</span><br><span class="line"></span><br><span class="line">$ brew -v</span><br></pre></td></tr></table></figure><h2 id="Heroku-設定"><a href="#Heroku-設定" class="headerlink" title="Heroku 設定"></a>Heroku 設定</h2><ul><li>herokuでアプリケーション作成</li><li>クレカ登録（後述の MySQL 向けプラグインを追加するために必要．Free プランを選べば課金はされない）</li><li>プラグイン追加<ul><li>Configure Add-ons</li><li>「Clear DB」で検索して選択 -&gt; Provision</li></ul></li></ul><p><img src="heroku-clear-db.png" alt="heroku-clear-db.png" title="heroku-clear-db.png"></p><h2 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h2><p>heroku に登録している email, password でログインする．</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku login</span><br></pre></td></tr></table></figure><h2 id="DB-のセットアップ"><a href="#DB-のセットアップ" class="headerlink" title="DB のセットアップ"></a>DB のセットアップ</h2><p>先述の ClearDB をプラグインとして追加しているとそれ用の環境変数が設定される．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ heroku config -a &lt;your-app-name&gt;</span><br><span class="line">=== your-app-name Config Vars</span><br><span class="line">CLEARDB_DATABASE_URL: mysql://xxxxxxxxxxxxxx:xxxxxxxxxx@xxxxxxxxxxxxxxxx.cleardb.net/heroku_xxxxxxxxxxxx?reconnect=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>mysql</code> の箇所を <code>mysql2</code> に変更して別名で登録する</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku config:<span class="built_in">set</span> DATABASE_URL=mysql://xxxxxxxxxxxxxx:xxxxxxxxxx@xxxxxxxxxxxxxxxx.cleardb.net/heroku_xxxxxxxxxxxx?reconnect=<span class="literal">true</span> -a &lt;your-app-name&gt;</span><br><span class="line">Setting DATABASE_URL and restarting ⬢ your-app-name... <span class="keyword">done</span>, v4</span><br></pre></td></tr></table></figure><p>設定した <code>DATABASE_URL</code> を接続情報として設定する．ClearDB の場合 <code>url</code> に先程の値を設定するだけでよい．</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config/database.sample.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">production:</span></span><br><span class="line">  <span class="comment"># For Heroku</span></span><br><span class="line">  <span class="attr">url:</span> &lt;%=<span class="ruby"> ENV[<span class="string">'DATABASE_URL'</span>] </span>%&gt;</span><br></pre></td></tr></table></figure><h2 id="環境変数"><a href="#環境変数" class="headerlink" title="環境変数"></a>環境変数</h2><p>その他，必要な環境変数を設定する．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku config:<span class="built_in">set</span> XXXXXX=xxxxxx</span><br></pre></td></tr></table></figure><h2 id="デプロイ"><a href="#デプロイ" class="headerlink" title="デプロイ"></a>デプロイ</h2><p>一旦デプロイしてみる．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br></pre></td></tr></table></figure><p>heroku が Remote Repository に登録されていない場合は追加する</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heroku git:remote -a your-app-name</span><br></pre></td></tr></table></figure><p>デプロイ実行．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">$ git push heroku master</span><br><span class="line"></span><br><span class="line">$ git push heroku master</span><br><span class="line">Enumerating objects: 750, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (750/750), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (469/469), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (750/750), 163.13 KiB | 8.58 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 750 (delta 347), reused 529 (delta 223)</span><br><span class="line">remote: Compressing <span class="built_in">source</span> files... <span class="keyword">done</span>.</span><br><span class="line">remote: Building <span class="built_in">source</span>:</span><br><span class="line"></span><br><span class="line">••• (中略)</span><br><span class="line"></span><br><span class="line">remote: -----&gt; Detecting rake tasks</span><br><span class="line">remote: -----&gt; Preparing app <span class="keyword">for</span> Rails asset pipeline</span><br><span class="line">remote:        Running: rake assets:precompile</span><br><span class="line">remote:        yarn install v1.5.1</span><br><span class="line">remote:        [1/5] Validating package.json...</span><br><span class="line">remote:        error mixed-nuts@: The engine <span class="string">"node"</span> is incompatible with this module. Expected version <span class="string">"8.11.3"</span>.</span><br><span class="line">remote:        error An unexpected error occurred: <span class="string">"Found incompatible module"</span>.</span><br><span class="line">remote:        info If you think this is a bug, please open a bug report with the information provided <span class="keyword">in</span> <span class="string">"/tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/yarn-error.log"</span>.</span><br><span class="line">remote:        info Visit https://yarnpkg.com/en/docs/cli/install <span class="keyword">for</span> documentation about this <span class="built_in">command</span>.</span><br><span class="line">remote:        I, [2018-07-19T02:14:37.162948 <span class="comment">#1621]  INFO -- : Writing /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/public/assets/application-2b0484413e031f2b6ab1e6b1ff622e8c65bf0c834557595a5bf6361807ca24d4.js</span></span><br><span class="line">remote:        I, [2018-07-19T02:14:37.163879 <span class="comment">#1621]  INFO -- : Writing /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/public/assets/application-2b0484413e031f2b6ab1e6b1ff622e8c65bf0c834557595a5bf6361807ca24d4.js.gz</span></span><br><span class="line">remote:        I, [2018-07-19T02:14:37.171636 <span class="comment">#1621]  INFO -- : Writing /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/public/assets/application-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css</span></span><br><span class="line">remote:        I, [2018-07-19T02:14:37.172018 <span class="comment">#1621]  INFO -- : Writing /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/public/assets/application-e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.css.gz</span></span><br><span class="line">remote:        Webpacker is installed 🎉 🍰</span><br><span class="line">remote:        Using /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/config/webpacker.yml file <span class="keyword">for</span> setting up webpack paths</span><br><span class="line">remote:        Compiling…</span><br><span class="line">remote:        Compilation failed:</span><br><span class="line">remote:        </span><br><span class="line">remote:        /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/vendor/bundle/ruby/2.4.0/gems/webpacker-3.4.1/lib/webpacker/webpack_runner.rb:11:<span class="keyword">in</span> `<span class="built_in">exec</span><span class="string">': No such file or directory - /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/node_modules/.bin/webpack (Errno::ENOENT)</span></span><br><span class="line"><span class="string">remote:         from /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/vendor/bundle/ruby/2.4.0/gems/webpacker-3.4.1/lib/webpacker/webpack_runner.rb:11:in `block in run'</span></span><br><span class="line">remote:         from /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/vendor/bundle/ruby/2.4.0/gems/webpacker-3.4.1/lib/webpacker/webpack_runner.rb:10:<span class="keyword">in</span> `<span class="built_in">chdir</span><span class="string">'</span></span><br><span class="line"><span class="string">remote:         from /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/vendor/bundle/ruby/2.4.0/gems/webpacker-3.4.1/lib/webpacker/webpack_runner.rb:10:in `run'</span></span><br><span class="line">remote:         from /tmp/build_b49b2f88d5ea1e404f425db2d2a8bf55/vendor/bundle/ruby/2.4.0/gems/webpacker-3.4.1/lib/webpacker/runner.rb:6:<span class="keyword">in</span> `run<span class="string">'</span></span><br><span class="line"><span class="string">remote:         from ./bin/webpack:15:in `&lt;main&gt;'</span></span><br><span class="line">remote:        </span><br><span class="line">remote:</span><br><span class="line">remote:  !</span><br><span class="line">remote:  !     Precompiling assets failed.</span><br><span class="line">remote:  !</span><br><span class="line">remote:  !     Push rejected, failed to compile Ruby app.</span><br><span class="line">remote: </span><br><span class="line">remote:  !     Push failed</span><br><span class="line">remote: Verifying deploy...</span><br><span class="line">remote: </span><br><span class="line">remote: !       Push rejected to your-app-name.</span><br><span class="line">remote:</span><br></pre></td></tr></table></figure><h3 id="webpacker-周りのエラー"><a href="#webpacker-周りのエラー" class="headerlink" title="webpacker 周りのエラー"></a>webpacker 周りのエラー</h3><p>どうやら，<a href="https://github.com/rails/webpacker/issues/739#issuecomment-327546884" target="_blank" rel="noopener">デフォルトの buildpacks が古いらしい</a></p><p>buildpacksを設定し直す．<code>buildpacks:set</code> <code>buildpacks:add</code> は異なるので注意．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ heroku buildpacks:<span class="built_in">set</span> heroku/nodejs</span><br><span class="line">Buildpack <span class="built_in">set</span>. Next release on your-app-name will use heroku/nodejs.</span><br><span class="line">Run git push heroku master to create a new release using this buildpack.</span><br><span class="line">$ heroku buildpacks</span><br><span class="line">=== your-app-name Buildpack URL</span><br><span class="line">heroku/nodejs</span><br><span class="line">$ heroku buildpacks:add heroku/ruby</span><br><span class="line">Buildpack added. Next release on your-app-name will use:</span><br><span class="line">  1. heroku/nodejs</span><br><span class="line">  2. heroku/ruby</span><br><span class="line">Run git push heroku master to create a new release using these buildpacks.</span><br><span class="line">$ heroku buildpacks</span><br><span class="line">=== your-app-name Buildpack URLs</span><br><span class="line">  1. heroku/nodejs</span><br><span class="line">  2. heroku/ruby</span><br></pre></td></tr></table></figure><h3 id="Sprockets-周りのエラー"><a href="#Sprockets-周りのエラー" class="headerlink" title="Sprockets 周りのエラー"></a>Sprockets 周りのエラー</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">remote:  !</span><br><span class="line">remote:  !     A security vulnerability has been detected in your application.</span><br><span class="line">remote:  !     To protect your application you must take action. Your application</span><br><span class="line">remote:  !     is currently exposing its credentials via an easy to exploit directory</span><br><span class="line">remote:  !     traversal.</span><br><span class="line">remote:  !</span><br><span class="line">remote:  !     To protect your application you must either upgrade to Sprockets version &quot;3.7.2&quot;</span><br><span class="line">remote:  !     or disable dynamic compilation at runtime by setting:</span><br><span class="line">remote:  !</span><br><span class="line">remote:  !</span><br></pre></td></tr></table></figure><p>remote:  !     config.assets.compile = false # Disables security vulnerability<br>remote:  !     ```<br>remote:  !<br>remote:  !     To read more about this security vulnerability please refer to this blog post:<br>remote:  !     <a href="https://blog.heroku.com/rails-asset-pipeline-vulnerability" target="_blank" rel="noopener">https://blog.heroku.com/rails-asset-pipeline-vulnerability</a><br>remote:  !</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[Rails Asset Pipeline Directory Traversal Vulnerability (CVE-2018-3760)](https://blog.heroku.com/rails-asset-pipeline-vulnerability)</span><br><span class="line"></span><br><span class="line">Directory Traversal 関連の脆弱性に関する指摘らしい．</span><br><span class="line">エラーメッセージに記載の通り sprockets を `3.7.2` にアップデートしたら解決した．</span><br><span class="line"></span><br><span class="line">```bash</span><br><span class="line">$ gem update sprockets</span><br></pre></td></tr></table></figure><h3 id="再デプロイ"><a href="#再デプロイ" class="headerlink" title="再デプロイ"></a>再デプロイ</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ git push heroku master</span><br><span class="line">Enumerating objects: 750, <span class="keyword">done</span>.</span><br><span class="line">Counting objects: 100% (750/750), <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 8 threads.</span><br><span class="line">Compressing objects: 100% (469/469), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (750/750), 163.13 KiB | 8.58 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Total 750 (delta 347), reused 529 (delta 223)</span><br><span class="line">remote: Compressing <span class="built_in">source</span> files... <span class="keyword">done</span>.</span><br><span class="line">remote: Building <span class="built_in">source</span>:</span><br><span class="line"></span><br><span class="line">••• (中略)</span><br><span class="line"></span><br><span class="line">remote: -----&gt; Discovering process types</span><br><span class="line">remote:        Procfile declares types     -&gt; (none)</span><br><span class="line">remote:        Default types <span class="keyword">for</span> buildpack -&gt; console, rake, web, worker</span><br><span class="line">remote: </span><br><span class="line">remote: -----&gt; Compressing...</span><br><span class="line">remote:        Done: 103.3M</span><br><span class="line">remote: -----&gt; Launching...</span><br><span class="line">remote:        Released v6</span><br><span class="line">remote:        https://your-app-name.herokuapp.com/ deployed to Heroku</span><br><span class="line">remote: </span><br><span class="line">remote: Verifying deploy... <span class="keyword">done</span>.</span><br><span class="line">To https://git.heroku.com/your-app-name.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure><h2 id="db-migrate"><a href="#db-migrate" class="headerlink" title="db:migrate"></a>db:migrate</h2><p>先程の設定でソースコードが配置されるので，<code>database.sample.yml</code> をコピーして，<code>database.yml</code> を設置する．</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ heroku run cp config/database.sample.yml config/database.yml</span><br><span class="line">$ heroku run rails db:migrate RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>もっといいやり方でやりたい…🤔</p><h2 id="Basic-認証を設定"><a href="#Basic-認証を設定" class="headerlink" title="Basic 認証を設定"></a>Basic 認証を設定</h2><p>次のようなコードを追加して basic 認証を設定することができる．<br><code>BASIC_AUTH_USER</code> <code>BASIC_AUTH_PASS</code> は <code>heroku config:set</code> コマンドで予め設定しておく．</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationController</span> &lt; ActionController::Base</span></span><br><span class="line">  protect_from_forgery <span class="symbol">with:</span> <span class="symbol">:exception</span></span><br><span class="line">  http_basic_authenticate_with <span class="symbol">name:</span> ENV[<span class="string">'BASIC_AUTH_USER'</span>], <span class="symbol">password:</span> ENV[<span class="string">'BASIC_AUTH_PASS'</span>] <span class="keyword">if</span> Rails.env == <span class="string">"production"</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="master-ブランチ以外をデプロイ"><a href="#master-ブランチ以外をデプロイ" class="headerlink" title="master ブランチ以外をデプロイ"></a>master ブランチ以外をデプロイ</h2><p>次のように suffix に <code>:master</code> つけるとそのブランチがデプロイできる．</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># develop ブランチが heroku/master としてデプロイされる</span><br><span class="line">$ git push heroku devlop:master</span><br></pre></td></tr></table></figure><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>heroku 楽ちん😇👏✨</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rails の開発環境をサクッ構築するために heroku を使ったときのメモ．&lt;/p&gt;
&lt;h2 id=&quot;環境&quot;&gt;&lt;a href=&quot;#環境&quot; class=&quot;headerlink&quot; title=&quot;環境&quot;&gt;&lt;/a&gt;環境&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Rails 5.1.6&lt;/li&gt;
      
    
    </summary>
    
    
    
      <category term="rails" scheme="https://blog.tanaka.world/tags/rails/"/>
    
      <category term="webpacker" scheme="https://blog.tanaka.world/tags/webpacker/"/>
    
      <category term="heroku" scheme="https://blog.tanaka.world/tags/heroku/"/>
    
  </entry>
  
  <entry>
    <title>Vue Fes Japan 2018 に行ってきた</title>
    <link href="https://blog.tanaka.world/vue-fes-japan-2018/"/>
    <id>https://blog.tanaka.world/vue-fes-japan-2018/</id>
    <published>2018-11-03T03:51:46.000Z</published>
    <updated>2020-12-25T03:35:42.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Event-detail"><a href="#Event-detail" class="headerlink" title="Event detail"></a>Event detail</h2><ul><li>2018.11.3 (Sat.)</li><li>Akihabara UDX 4F / UDX Gallery</li><li>タイムテーブルは<a href="https://vuefes.jp/time-table/" target="_blank" rel="noopener">こちら</a></li></ul><p><img src="time-table.png" alt="time-table.png" title="time-table.png"></p><h2 id="Keynote"><a href="#Keynote" class="headerlink" title="Keynote"></a>Keynote</h2><p>by <a href="https://twitter.com/youyuxi" target="_blank" rel="noopener">@youyuxi</a></p><p>Vue3.0 の話</p><ul><li>TL;DR;<ul><li>速く，小さく，メンテしやすく，ネイティブ向け，保守性</li></ul></li><li>速く<ul><li>Virtual DOM 実装をフルスクラッチから作り直し<ul><li>mount と patch 処理が最大100%向上</li></ul></li><li>言語標準の最適化によって速度向上<ul><li>Map/Set/WeakMap/WeakSet</li><li>Class</li></ul></li><li>プロパティプロキシの高速化<ul><li>Object.definePropertyは使わなくなる</li><li>ネイティブプロキシ</li></ul></li><li>実行時オーバーヘッド削減のため，コンパイル時にヒントを追加<ul><li>React の JSX に似ている</li></ul></li><li>lazy function<ul><li>Reactではこの仕組みを使っていない</li></ul></li><li>Static Tree Hoisting<ul><li>変更がなかったとしてもそれを調べる必要があった</li></ul></li><li>コンポーネントのインスタンス化の効率化<ul><li>速度２倍，メモリ使用量半減</li></ul></li></ul></li><li>小さく<ul><li>Tree-shakingへの対応<ul><li>使われない処理を，バンドルから取り除く機能</li><li>webpackとかにもこの機能はある</li><li>ランタイムサイズ10kb以下(GZip)</li></ul></li></ul></li><li>メンテしすく</li><li>よりネイティブ向けにつくりやすく<ul><li>カスタムレンダラAPI</li></ul></li><li>保守性向上<ul><li>リアクティビティAPI</li><li>Observer メソッドが追加される</li></ul></li><li>Render Track<ul><li>再描画の仕組みが分かりづらかった</li><li>renderTriggered callback が追加される</li></ul></li><li>保守性<ul><li>TSX TS Support の強化</li><li>Warningもわかりやすくなる</li><li>実験的なHooks API</li><li>実験的なTimeSlicing<ul><li>必要なくなった処理を間引く<ul><li>同じcallbackが連続で実行されたとき，古い方は実行する必要がなくなる</li></ul></li><li>これによって，60fps に最適化</li></ul></li></ul></li></ul><h2 id="Platinum-Sponsor-Session"><a href="#Platinum-Sponsor-Session" class="headerlink" title="Platinum Sponsor Session"></a>Platinum Sponsor Session</h2><p>PLAIDさんのプラチナスポンサー枠発表</p><ul><li>Karte</li><li>2014年からVueでつくっている</li><li>1000サイト以上で導入</li><li>導入している企業のマーケターが，GUI上でVueコンポーネントをつくるような管理画面イメージ</li></ul><h2 id="Lunch-Sponsor"><a href="#Lunch-Sponsor" class="headerlink" title="Lunch Sponsor"></a>Lunch Sponsor</h2><p><strong>LINE</strong></p><ul><li>by <a href="https://twitter.com/kitak" target="_blank" rel="noopener">https://twitter.com/kitak</a></li><li>LINEでVueどう使ってるの？</li><li>Webあるの？</li><li>スタンプ、WebView</li><li>四年前 0.10のころから</li><li>SSR必要なところはNuxtも</li><li>コミュニティ貢献</li><li>UIT</li></ul><p><strong>Scoute</strong></p><ul><li>by <a href="https://twitter.com/kotamats" target="_blank" rel="noopener">https://twitter.com/kotamats</a></li><li>Vue + Laravel</li><li><a href="https://laravue.connpass.com/event/92231/" target="_blank" rel="noopener">https://laravue.connpass.com/event/92231/</a></li></ul><p><strong>Repro</strong></p><ul><li>by <a href="https://twitter.com/cheezenaan" target="_blank" rel="noopener">https://twitter.com/cheezenaan</a></li><li>v0.12 のころから</li><li>Vuex</li><li>堅牢なアーキテクチャ</li></ul><h2 id="Next-level-Vue-Animations"><a href="#Next-level-Vue-Animations" class="headerlink" title="Next-level Vue Animations"></a>Next-level Vue Animations</h2><p>by <a href="https://twitter.com/sarah_edo" target="_blank" rel="noopener">@srah_edo</a></p><p><a href="http://slides.com/sdrasner/vuefes-japan" target="_blank" rel="noopener">Slide</a></p><ul><li>初日本</li><li>人間の脳は100msしかパースできない</li><li><transition/>を見直す</li><li>変化を宣言的に記述できる</li><li>transition mode</li><li>transition group</li><li>FLIP for heavy process<ul><li>First</li><li>Last</li><li>Invert</li><li>Play</li></ul></li><li>Transition with reactive</li><li>Wahat is reactive<ul><li>getters/setters 方式を採用</li></ul></li><li>Repository<ul><li>変化しているものをカプセル化</li></ul></li></ul><ul><li><a href="https://github.com/sdras/nuxt-type" target="_blank" rel="noopener">https://github.com/sdras/nuxt-type</a></li><li>Vue + SVG<ul><li>Seamless Animations by Vue.js</li></ul></li></ul><h2 id="Vue-Designer-Integration-of-design-and-implementation"><a href="#Vue-Designer-Integration-of-design-and-implementation" class="headerlink" title="Vue Designer: Integration of design and implementation"></a>Vue Designer: Integration of design and implementation</h2><p>by <a href="https://twitter.com/ktsn" target="_blank" rel="noopener">@ktsn</a></p><p><a href="https://slides.com/ktsn/vue-fes-vue-designer#/" target="_blank" rel="noopener">Slide</a></p><ul><li>デザインと実装で役割がわかれている</li><li>昔は静的ウェブサイトだったからデザイナーが全部やっていたが，今はアプリケーションになってきた</li><li>些細な実装の変更も，デザインファイルに適用していかないと後々めんどくさいことになる</li><li>古くからみんな解決しようとしている<ul><li>DreamWeaverのデザインビュー</li><li><a href="https://t.co/ISJgQsy9u9" target="_blank" rel="noopener">vuegg</a></li><li><a href="https://framer.com/" target="_blank" rel="noopener">Framer X</a> (欲しい機能に近い)</li></ul></li><li>欲しい機能<ul><li>SFCとデザインが対応する</li><li>動的なデザイン（ウィンドウ幅に併せて動的にデザインも変わる）</li></ul></li><li>👉 vue-designer<ul><li><a href="https://github.com/ktsn/vue-designer" target="_blank" rel="noopener">https://github.com/ktsn/vue-designer</a></li><li>プロトタイプ中</li><li>vscode と連動</li><li>vscode から vue-designer を起動すると，WebViewで実際の画面をプレビューできる</li><li>ウィンドウ上の変更はコードに反映される</li><li>vue-designer スゴイ:D  既存のコンポーネント一覧からD&amp;Dで要素挿入できる，かつソースコードにもimportが追加されている</li><li>Parsing<ul><li>HTML: vue-eslint-paser</li><li>JS: @babel/parser</li><li>CSS: postcss</li></ul></li><li>AST</li><li>Renderer を再実装<ul><li>v-if/v-for など大体対応</li><li>理由：任意の処理を挟めるようにしたいから<ul><li>D&amp;D挿入</li><li>ガイドの表示</li><li>(未実装) 要素間のpx数を計算＆表示</li></ul></li></ul></li><li>Server Client 構成になっていて，WSでやりとりしている<ul><li>VSCodeに依存しなくてよいというメリットもある</li><li>デバッグも普通のWeb開発と同じようにできる</li></ul></li></ul></li><li>Future<ul><li>Preview tool for SFC</li></ul></li></ul><h2 id="Nuxt-js-2-0"><a href="#Nuxt-js-2-0" class="headerlink" title="Nuxt.js 2.0"></a>Nuxt.js 2.0</h2><p>by <a href="https://twitter.com/Atinux" target="_blank" rel="noopener">Sébastien Chopin</a></p><ul><li>universal (Isomorphic)</li><li>spa (No SSR)</li><li>Nuxt 2.0 !<ul><li>Webpack 4</li><li>Babel 7</li><li>より速いビルド<ul><li>起動34%</li><li>再コンパイル速度45%</li></ul></li><li>nuxt-start 起動速度2倍</li></ul></li><li>Nuxt 2.3 (Next Week ?)<ul><li>modern browser 向けのオプション ‘nuxt build –modern’ が入る</li><li>Client/Serverのバンドルを分離できるようになった</li></ul></li><li>QA<ul><li>Vue3.0への移行も問題なくできそう</li><li>Nuxt Developers は Vue3.0 のソースコード参照しながら Nuxt 3.0 の開発進めている！</li><li>対応版のNuxt3.0のほうが先にリリースされる</li></ul></li></ul><h2 id="Story-about-reconstructing-note-front-end-with-Nuxt-js"><a href="#Story-about-reconstructing-note-front-end-with-Nuxt-js" class="headerlink" title="Story about reconstructing note front end with Nuxt.js"></a>Story about reconstructing note front end with Nuxt.js</h2><p>by <a href="https://twitter.com/fukuiretu" target="_blank" rel="noopener">@fukuiretu</a></p><ul><li>現在 Angular.js 1.x 系<ul><li>SPA (no SSR)</li><li>coffee</li><li>RoR</li><li>AWS</li></ul></li><li>問題点<ul><li>初期表示重い，貧弱端末だと顕著</li><li>1.x 系はSSRをサポートしていない</li></ul></li><li>技術選定<ul><li>SSR</li><li>デザイナーもコード書く</li><li>フロント専業がいないので，学習コストを下げ地</li></ul></li><li>諸々候補はあったが，結果的に Vue/Nuxt を採用した<ul><li>実行速度＋開発速度の担保</li><li>コンポーネント思考</li><li>scoped CSS</li><li>ドキュメント充実度（日本語版も含め）</li><li>コミュニティ活発度</li><li>@kitak さんによるコンサル</li></ul></li><li>Nuxt<ul><li>規約がある (SSR, Directory -&gt; Routing, Plugins etc…)</li><li>Modern Eco System</li></ul></li><li>Angular -&gt; Nuxt 移行フロー<ul><li>パス毎に段階的リリース</li><li>社内向けリリース -&gt; DogFooding -&gt; 一般公開</li><li>ロールバックが容易</li></ul></li><li>ツラミ<ul><li>Angular.js 開発も並行していて，二重メンテナンスが必要</li></ul></li><li>コンポーネント数: 216</li><li>パフォーマンス比較<ul><li>LightHouse (Performance 3 -&gt; 41%, 残りは画像の最適化)</li><li>WebPageTest</li></ul></li><li>設計方針<ul><li>Vuex + AtomicDesign</li><li>ストアに状態をもたせる判断基準<ul><li><ol><li>複数のコンポーネント間のデータ共有するかどうか（バケツリレー対策）</li></ol></li><li><ol start="2"><li>xxxxxxxxxxxxx</li></ol></li><li><ol start="3"><li>APIリクエストするかどうか</li></ol></li></ul></li><li>Atomic Design<ul><li>Atoms: ステートレス，State は参照しないようにする</li><li>Organisms は Module を参照可能</li><li><a href="https://medium.com/@t_sugawara/vue-js-%E3%81%8B%E3%82%89%E3%81%BF%E3%81%9F-atomicdesign-e90517842801" target="_blank" rel="noopener">Vue.js からみた AtomicDesign</a>に影響受けている</li></ul></li></ul></li><li>Storybook 入れてる<ul><li>1回挫折した<ul><li>コンポーネント多くて視認性が悪くなった</li><li>Storybook v4はNuxt.js v2でもいける</li><li>nuxt.config.js 以外に Storybook 用の webpack.config.js が必要</li></ul></li></ul></li><li>SSR<ul><li>JSDOMで，window/document が参照できない問題を解決</li></ul></li><li>nuxt build analyze</li><li><a href="https://polyfill.io/v2/docs/" target="_blank" rel="noopener">Polyfill.io</a><ul><li>ブラウザ自動判別して必要なポリフィルを自動取得してくれる</li></ul></li><li>Nuxt on Lambda<ul><li>Lambda は Node v8.10.0 までしか使えないので，Nuxt が 8系を切ると使えなくなってしまう</li><li><a href="https://mya-ake.com/posts/nuxtjs-on-aws-lambda/" target="_blank" rel="noopener">Nuxt.js on AWS Lambda with Serverless Framework</a> が詳しく解説している</li></ul></li></ul><h2 id="Tests-of-Vue-Component-sent-from-the-site-that-kept-writing-unit-tests-for-one-year"><a href="#Tests-of-Vue-Component-sent-from-the-site-that-kept-writing-unit-tests-for-one-year" class="headerlink" title="Tests of Vue Component sent from the site that kept writing unit tests for one year"></a>Tests of Vue Component sent from the site that kept writing unit tests for one year</h2><p>by <a href="https://twitter.com/tsuchikazu" target="_blank" rel="noopener">@tsuchikazu</a></p><p><a href="https://speakerdeck.com/tsuchikazu/vue-component-test" target="_blank" rel="noopener">Slide</a></p><ul><li>GMO Pepabo<ul><li>半分以上 Vue を使っている</li></ul></li><li>e.g. カラーミーリピート<ul><li>SPA </li><li>リリース後ちょうど１年</li></ul></li><li>方針<ul><li>自動テストは「外からみた振る舞い」を対象とする</li><li>設計の可動域を確保</li></ul></li><li>テスト対象<ul><li>Page Component をテストする</li></ul></li><li>mount vs shallow mount</li><li>Test Targets<ul><li>Lifecycle</li><li>Props / Vuex </li><li>User Interraction</li></ul></li><li>Lifecycle<ul><li>時間の関係でスキップ（英断）</li></ul></li><li>Props / Vuex<ul><li>単純な Assert だと表示変わったらテストも経の区する必要ある</li><li>ざっくりしすぎ，テストがテストになっていない<ul><li>👉  Snapshot Testing by <a href="https://jestjs.io/docs/en/snapshot-testing" target="_blank" rel="noopener">Jest</a><ul><li>DOMのSnapshotを比較するテスト</li><li>差分がなければ Success</li></ul></li></ul></li><li>CSSが当たった結果をテストしたい<ul><li>👉 Visual Testing<ul><li>Storybook + REG-SUIT</li><li>Storybook だけだと，Vuex に依存している場合，事前データを作成するのが面倒<ul><li>汎用的な mock component </li></ul></li><li>REG-SUIT<ul><li>スクショの視覚的比較</li><li><a href="https://tech.misoca.jp/entry/2018/04/27/153000" target="_blank" rel="noopener">REG-SUITの参考例</a></li><li>前回のスクリーンショットをどこかにクラウドに保存しておいて，それとの比較が出せる</li><li>画像の差分が色で可視化される</li></ul></li></ul></li></ul></li></ul></li><li>User Interraction<ul><li>Validatin<ul><li>vee-validate</li><li>validation エラー時に，メッセージが表示されているあ，dispatch されていないかなどをテストする</li></ul></li></ul></li><li>まとめ<ul><li>重要なところだけでもテストやっておくとよい</li><li>Visual Test よい</li><li>レビューがとても楽になる</li></ul></li><li>QA<ul><li>100枚くらいのスクショで10分くらい<ul><li>ビルドも重いのでスクショ比較自体はそんなに時間かかっていないと思われる</li></ul></li><li>E2E との棲み分けは？<ul><li>コンポーネント単位でテストできる方が色々なパターンがテストしやすいので，こっちを採用している</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Event-detail&quot;&gt;&lt;a href=&quot;#Event-detail&quot; class=&quot;headerlink&quot; title=&quot;Event detail&quot;&gt;&lt;/a&gt;Event detail&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;2018.11.3 (Sat.)&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
      <category term="vue.js" scheme="https://blog.tanaka.world/tags/vue-js/"/>
    
  </entry>
  
  <entry>
    <title>上海に行ってきた</title>
    <link href="https://blog.tanaka.world/shanhai-2018/"/>
    <id>https://blog.tanaka.world/shanhai-2018/</id>
    <published>2018-10-28T15:37:57.000Z</published>
    <updated>2020-12-25T03:35:42.807Z</updated>
    
    <content type="html"><![CDATA[<p>会社の出張で 2 泊 3 日，上海に行ってきた．<br>個人的には 2013 年 3 月以来 5 年半ぶりの上海．</p><h2 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR;"></a>TL;DR;</h2><ul><li>現地では，バーコードをスキャンするというフローが当たり前で生活に根ざしているのが，日本との違いだと感じた．</li><li>普段からキャッシュレス決済メインで生活しているので，これがとても新しかった！というのがあまりなかったが，ミニプログラムも含めると一つのアプリ＋その残高で生活が完結してしまう便利さは実感できた．</li><li>アリババのニューリテールモール<a href="https://glotechtrends.com/qinchengli-alibaba-new-retail-mall-180429/" target="_blank" rel="noopener">亲橙里(チンチェンリー)</a>がとても印象的だった．当然だが Alipay がメインの決済手段で，WeChatPay は使えない．</li></ul><h2 id="事前にインストールしたアプリ"><a href="#事前にインストールしたアプリ" class="headerlink" title="事前にインストールしたアプリ"></a>事前にインストールしたアプリ</h2><ul><li>ALIPAY</li><li>WeChat</li><li>Baidu 検索</li><li>Baidu 地図</li><li>Mobike (クレカ連携して500円分チャージした)</li><li>DiDi</li></ul><h2 id="換金・チャージ"><a href="#換金・チャージ" class="headerlink" title="換金・チャージ"></a>換金・チャージ</h2><ul><li>日本円 →  元 の換金<ul><li>事前に500元の現金に換金（日本円 18 円計算で 9035 円だった）</li></ul></li><li>WechatPay のチャージ<ul><li>羽田空港国際便ターミナルの 2F のポケットチャージャーでチャージ</li><li>日本円 1万円分チャージした</li></ul></li></ul><h2 id="SIM"><a href="#SIM" class="headerlink" title="SIM"></a>SIM</h2><p>上海についてすぐ，空港出口のカウンタで購入した．</p><ul><li>通話なし SIM<ul><li>通話ありにしておくべきだった（Wechat アプリ内のミニプログラムで Didi を使用するのに電話番号認証が必要だった…）</li></ul></li><li>データ通信 3GB </li><li>150元=約2700円くらい</li></ul><h2 id="中国のインターネット規制"><a href="#中国のインターネット規制" class="headerlink" title="中国のインターネット規制"></a>中国のインターネット規制</h2><ul><li>検索エンジンが Google だと何も検索できない，ブラウザの設定を bing にする必要があった</li><li>bing にしてもサイトによっては検索できない（google系ドメイン, instagram, YouTube, Twitter, LINE など使えない）</li><li>Google マップや Google 検索アプリも使えないので，Baidu 関連アプリのインストールは必須</li><li><a href="https://itunes.apple.com/us/app/vpn-proxy-master/id1025707485?mt=8" target="_blank" rel="noopener">VPN Proxy Master</a> というフリーアプリを入れると，日本にいるのと同じようにインターネット接続できた（但し速度と接続の安定性は保証できない，よく途切れる）</li><li>（香港 SIM だと，中国のインターネット規制に引っかかることなく使えるらしい）</li></ul><h2 id="Alipay"><a href="#Alipay" class="headerlink" title="Alipay"></a>Alipay</h2><ul><li>中国の口座を持っていないと，銀行口座から自動引落しはできなかった</li><li>他人から残高を送ってもらわないと使えない</li></ul><p>アリババのニューリテールモールでは，WeChatPay は全く使えなかった．当然だが Alipay 押し．<br>地下のスーパーではセルフレジにて Alipay で支払う形式だった．</p><h2 id="WechatPay"><a href="#WechatPay" class="headerlink" title="WechatPay"></a>WechatPay</h2><p>今回の出張で一番使ったアプリ．</p><p>アプリからバーコードを読み取って支払いができる他，個人間送金ができる．元を小数点以下二桁まで端数も払えて、割り勘とか便利だった．その他，お年玉機能，じゃんけんやサイコロ機能も面白い．</p><p>日本でよく使っている LINEPay とかと同じような感じだったが，売店だとチェックがザルだった．決済完了画面を店員さんに見せて目視確認というフローで購入が完了した．LINEPay だとお店側の TimeLine で決済された金額をチェックしているようなのだが，そういうの使ってなさそう．スクショ見せても突破できてしまう恐れがある．</p><p>アプリ内から WebView を立ち上げて別サービスを使うミニプログラムで Mobike を使おうとしたところ，電話番号認証が必要だった．音声通話なし SIM しか買ってなかったので使うことができなかった．</p><h2 id="Mobike"><a href="#Mobike" class="headerlink" title="Mobike"></a>Mobike</h2><p>アプリでバーコードを読み取ると，ロックが外れ課金が開始される．先日福岡でメルチャリ体験をしてきたのだが，メルチャリの体験は Mobike の体験と非常によく似ていた．スムーズ．福岡のメルチャリとの違いを述べるとすれば，圧倒的な普及率だと思う．街のどこに行っても乗れる自転車があり，どこでも停車することができる．Mobike のみならず，水色・緑色と様々な競合サービスが犇めいているという印象だった．</p><p>中国は道幅が広く自転車用レーン？のような路肩がある．自転車でもとても走りやすい．しかし電動スクーターには注意が必要．中国では深刻な排ガスを規制するために車以外は排ガスが規制されているらしい．一見，原チャのような見た目でもすべて電動スクーター，自転車の人工より多いかもくらい走っていた．音もなく猛スピードで接近してくるので何度かぶつかりそうになったのと，夜間にライトもつけていないのもチラホラ．そういえば，自転車にもヘッドライトが付いていなかった．危ない．．．</p><h2 id="Didi"><a href="#Didi" class="headerlink" title="Didi"></a>Didi</h2><p>中国の電話番号で SMS 認証が必要で，自分は使うことができなかった．Uber や Lyft のようなタクシー配車アプリと同様に，自分の位置情報と相手の位置情報でリアルタイムに待ち合わせする．仮に使うことができても，電話でやり取りする必要があり中国語話せないとキツそうだった．通訳必須．</p><h2 id="カタカナで覚える中国語"><a href="#カタカナで覚える中国語" class="headerlink" title="カタカナで覚える中国語"></a>カタカナで覚える中国語</h2><p>中国は日本語はもとより，英語が通じないところが多い．ホテルの方は若干英語が通じた．</p><ul><li>マイタン: お会計</li><li>ウェイシン: WeChat</li><li>ジーフー: 支払い</li><li>クィーマー: 使えますか？</li><li>クィー: OK</li><li>ブクィー: NG</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;会社の出張で 2 泊 3 日，上海に行ってきた．&lt;br&gt;個人的には 2013 年 3 月以来 5 年半ぶりの上海．&lt;/p&gt;
&lt;h2 id=&quot;TL-DR&quot;&gt;&lt;a href=&quot;#TL-DR&quot; class=&quot;headerlink&quot; title=&quot;TL;DR;&quot;&gt;&lt;/a&gt;TL;DR
      
    
    </summary>
    
    
    
      <category term="trip" scheme="https://blog.tanaka.world/tags/trip/"/>
    
  </entry>
  
  <entry>
    <title>10秒で歯磨きできる V-WHITE+</title>
    <link href="https://blog.tanaka.world/v-white-plus/"/>
    <id>https://blog.tanaka.world/v-white-plus/</id>
    <published>2018-10-24T12:37:04.000Z</published>
    <updated>2020-12-25T03:35:42.803Z</updated>
    
    <content type="html"><![CDATA[<p>makuake でパトロンしてた <a href="https://www.makuake.com/project/v-white/" target="_blank" rel="noopener">口にいれて、10秒歯磨き。360度電動歯ブラシ＆ホワイトニング　V-WHITE+</a> が届いた．</p><p>中国初のプロジェクトで，日本上陸は初らしい．<br><a href="https://www.makuake.com/member/index/379349/" target="_blank" rel="noopener">V-WHITE TEAM</a></p><blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">買ってみた<br>口にいれて、10秒歯磨き。360度電動歯ブラシ＆ホワイトニング　V-WHITE+<a href="https://t.co/QoBegXzTRV" target="_blank" rel="noopener">https://t.co/QoBegXzTRV</a><a href="https://twitter.com/hashtag/Makuake?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#Makuake</a> <a href="https://twitter.com/makuake_ca?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@makuake_ca</a>さんから <a href="https://t.co/WEaQCPXeY8" target="_blank" rel="noopener">pic.twitter.com/WEaQCPXeY8</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1013785755007631361?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 2, 2018</a></blockquote><blockquote class="twitter-tweet" data-lang="en"><p lang="ja" dir="ltr">なにかと思ったら、昔patronしてた全自動歯ブラシが来てた=͟͟͞͞ ( ꒪౪꒪) <a href="https://t.co/Trgr7CIVji" target="_blank" rel="noopener">pic.twitter.com/Trgr7CIVji</a></p>&mdash; tanakaworld 🧢 (@_tanakaworld) <a href="https://twitter.com/_tanakaworld/status/1052936218663514115?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">October 18, 2018</a></blockquote><h2 id="仕様"><a href="#仕様" class="headerlink" title="仕様"></a>仕様</h2><p><img src="travel-set.jpg" alt="travel-set.jpg" title="travel-set.jpg"></p><p>11,700円コースでパトロンしていた．一般販売価格の 40% OFF なセットで</p><ul><li>V-White+ マウスピース (2)</li><li>V-White+ コアユニット</li><li>充電器</li><li>トラベルバッグ</li></ul><p>が梱包されている．</p><p>咥えるとマウスピース型のブラシが<strong>ほぼ</strong>歯に密着する状態になる．超音波式の電動歯ブラシのブラシ部分がマウスピースに変わったようなイメージ．ワイヤレス充電器ということだったので，Qi規格かなにかかと思っていたが，実際はワイヤレスでもなんでもはなかった．金属のポッチが付いていてそれが接触しないと充電されない…バッテリー自体はフル充電で１日２回の使用だと１ヶ月は持つらしい．IP65防水仕様．</p><h2 id="実際10秒で歯磨きできるのか"><a href="#実際10秒で歯磨きできるのか" class="headerlink" title="実際10秒で歯磨きできるのか"></a>実際10秒で歯磨きできるのか</h2><p>１週間くらい使ってみたところ <strong>歯磨きはできなかった</strong> というのが正直な感想．</p><blockquote><p>歯科医推奨の Bass technique で歯を磨きます。リニアモータの採用により、高速振動による強力なクリーニングが可能です。</p></blockquote><p>Bass technique＝バス法？のことだと思うが，歯ブラシを歯と歯茎の間に当てて細かく振動させることによって，歯を磨くというより歯周全体のクリーンにするという方法．</p><p>マウスピースがほぼ歯に密着するとはいえ，磨きたい場所全てに触れるわけではない．口の大きさや歯並びは千差万別なので当然の結果ではある．特に奥歯の奥には全く接触しない．初期の V-WHITE と比較すると，比較的密集したブラシ毛が備わったようではあるが，触れている歯や歯茎も磨けているかというと，体感は磨けていなさそう．</p><blockquote><p>到着されております商品ですが、V-Whiteのパッケージにてお届けさせていただいておりますが、内容物についてはV-white+となっております。ご不安をおかけしてしまい大変申し訳ございません。</p></blockquote><p>正直届いたときに間違いかと思ってビックリした（笑）</p><p>コンセプトや夢には共感するけど，実用面で今後使い続けていくのは厳しいなぁと感じた．</p><h2 id="ホワイトニング"><a href="#ホワイトニング" class="headerlink" title="ホワイトニング"></a>ホワイトニング</h2><blockquote><p>V-WHITE+ で使用されている冷光ホワイトニング技術は、歯がホワイトニングされるプロセスをスピードアップします。さらに、V-WHITEに埋め込まれた冷光ホワイトニング専用の電球は、安全性が高いため、使用者が十代であったとしても問題ありません。このテストはV-WHITE +でホワイトニングした後、VITAスケールを用いて測定した結果は本来より5〜14点ほど高く得られることが証明されています。ホワイトニングした後、本来の黄ばみをどれぐらい取り除いだのが数値が異なりますが、最終的には自然な白さで、光沢のある美しい歯になります。</p></blockquote><p>中国本土では一般的な <strong>冷光ホワイトニング</strong> という手法でホワイトニングできるらしい．この新しい技術を世界中に広めたいという説明があったので，歯磨きというよりこっちがメインなのかもしれない．今度使ってみる．</p><script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;makuake でパトロンしてた &lt;a href=&quot;https://www.makuake.com/project/v-white/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;口にいれて、10秒歯磨き。360度電動歯ブラシ＆ホワイトニング　V-WHIT
      
    
    </summary>
    
    
    
      <category term="makuake" scheme="https://blog.tanaka.world/tags/makuake/"/>
    
      <category term="cloud-funding" scheme="https://blog.tanaka.world/tags/cloud-funding/"/>
    
  </entry>
  
</feed>
